#! /bin/sh
# Generated from testsuite.at by GNU Autoconf 2.71.
#
# Fig2dev: Translate Fig code to various Devices
# Copyright (c) 1991 by Micah Beck
# Parts Copyright (c) 1985-1988 by Supoj Sutanthavibul
# Parts Copyright (c) 1989-2015 by Brian V. Smith
# Parts Copyright (c) 2015-2018 by Thomas Loimer
#
# Any party obtaining a copy of these files is granted, free of charge, a
# full and unrestricted irrevocable, world-wide, paid up, royalty-free,
# nonexclusive right and license to deal in this software and documentation
# files (the "Software"), including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense and/or sell copies
# of the Software, and to permit persons who receive copies from any such
# party to do so, with the only requirement being that the above copyright
# and this permission notice remain intact.
#
#
# Copyright (C) 2009-2017, 2020-2021 Free Software Foundation, Inc.
#
# This test suite is free software; the Free Software Foundation gives
# unlimited permission to copy, distribute and modify it.
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
as_nop=:
if test ${ZSH_VERSION+y} && (emulate sh) >/dev/null 2>&1
then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else $as_nop
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi



# Reset variables that may have inherited troublesome values from
# the environment.

# IFS needs to be set, to space, tab, and newline, in precisely that order.
# (If _AS_PATH_WALK were called with IFS unset, it would have the
# side effect of setting IFS to empty, thus disabling word splitting.)
# Quoting is to prevent editors from complaining about space-tab.
as_nl='
'
export as_nl
IFS=" ""	$as_nl"

PS1='$ '
PS2='> '
PS4='+ '

# Ensure predictable behavior from utilities with locale-dependent output.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# We cannot yet rely on "unset" to work, but we need these variables
# to be unset--not just set to an empty or harmless value--now, to
# avoid bugs in old shells (e.g. pre-3.0 UWIN ksh).  This construct
# also avoids known problems related to "unset" and subshell syntax
# in other old shells (e.g. bash 2.01 and pdksh 5.2.14).
for as_var in BASH_ENV ENV MAIL MAILPATH CDPATH
do eval test \${$as_var+y} \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done

# Ensure that fds 0, 1, and 2 are open.
if (exec 3>&0) 2>/dev/null; then :; else exec 0</dev/null; fi
if (exec 3>&1) 2>/dev/null; then :; else exec 1>/dev/null; fi
if (exec 3>&2)            ; then :; else exec 2>/dev/null; fi

# The user is always right.
if ${PATH_SEPARATOR+false} :; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    test -r "$as_dir$0" && as_myself=$as_dir$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  printf "%s\n" "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi


if test "x$CONFIG_SHELL" = x; then
  as_bourne_compatible="as_nop=:
if test \${ZSH_VERSION+y} && (emulate sh) >/dev/null 2>&1
then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '\${1+\"\$@\"}'='\"\$@\"'
  setopt NO_GLOB_SUBST
else \$as_nop
  case \`(set -o) 2>/dev/null\` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi
"
  as_required="as_fn_return () { (exit \$1); }
as_fn_success () { as_fn_return 0; }
as_fn_failure () { as_fn_return 1; }
as_fn_ret_success () { return 0; }
as_fn_ret_failure () { return 1; }

exitcode=0
as_fn_success || { exitcode=1; echo as_fn_success failed.; }
as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
if ( set x; as_fn_ret_success y && test x = \"\$1\" )
then :

else \$as_nop
  exitcode=1; echo positional parameters were not saved.
fi
test x\$exitcode = x0 || exit 1
blah=\$(echo \$(echo blah))
test x\"\$blah\" = xblah || exit 1
test -x / || exit 1"
  as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
  as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
  eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
  test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1
test \$(( 1 + 1 )) = 2 || exit 1"
  if (eval "$as_required") 2>/dev/null
then :
  as_have_required=yes
else $as_nop
  as_have_required=no
fi
  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null
then :

else $as_nop
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_found=false
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
  as_found=:
  case $as_dir in #(
	 /*)
	   for as_base in sh bash ksh sh5; do
	     # Try only shells that exist, to save several forks.
	     as_shell=$as_dir$as_base
	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		    as_run=a "$as_shell" -c "$as_bourne_compatible""$as_required" 2>/dev/null
then :
  CONFIG_SHELL=$as_shell as_have_required=yes
		   if as_run=a "$as_shell" -c "$as_bourne_compatible""$as_suggested" 2>/dev/null
then :
  break 2
fi
fi
	   done;;
       esac
  as_found=false
done
IFS=$as_save_IFS
if $as_found
then :

else $as_nop
  if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
	      as_run=a "$SHELL" -c "$as_bourne_compatible""$as_required" 2>/dev/null
then :
  CONFIG_SHELL=$SHELL as_have_required=yes
fi
fi


      if test "x$CONFIG_SHELL" != x
then :
  export CONFIG_SHELL
             # We cannot yet assume a decent shell, so we have to provide a
# neutralization value for shells without unset; and this also
# works around shells that cannot unset nonexistent variables.
# Preserve -v and -x to the replacement shell.
BASH_ENV=/dev/null
ENV=/dev/null
(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
case $- in # ((((
  *v*x* | *x*v* ) as_opts=-vx ;;
  *v* ) as_opts=-v ;;
  *x* ) as_opts=-x ;;
  * ) as_opts= ;;
esac
exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
# Admittedly, this is quite paranoid, since all the known shells bail
# out after a failed `exec'.
printf "%s\n" "$0: could not re-execute with $CONFIG_SHELL" >&2
exit 255
fi

    if test x$as_have_required = xno
then :
  printf "%s\n" "$0: This script requires a shell more modern than all"
  printf "%s\n" "$0: the shells that I found on your system."
  if test ${ZSH_VERSION+y} ; then
    printf "%s\n" "$0: In particular, zsh $ZSH_VERSION has bugs and should"
    printf "%s\n" "$0: be upgraded to zsh 4.3.4 or later."
  else
    printf "%s\n" "$0: Please tell bug-autoconf@gnu.org about your system,
$0: including any error possibly output before this
$0: message. Then install a modern shell, or manually run
$0: the script under such a shell if you do have one."
  fi
  exit 1
fi
fi
fi
SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
# Unset more variables known to interfere with behavior of common tools.
CLICOLOR_FORCE= GREP_OPTIONS=
unset CLICOLOR_FORCE GREP_OPTIONS

## --------------------- ##
## M4sh Shell Functions. ##
## --------------------- ##
# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset


# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit
# as_fn_nop
# ---------
# Do nothing but, unlike ":", preserve the value of $?.
as_fn_nop ()
{
  return $?
}
as_nop=as_fn_nop

# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`printf "%s\n" "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
printf "%s\n" X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} # as_fn_mkdir_p

# as_fn_executable_p FILE
# -----------------------
# Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} # as_fn_executable_p
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null
then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else $as_nop
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null
then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else $as_nop
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    printf "%s\n" "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  printf "%s\n" "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
printf "%s\n" X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits


  as_lineno_1=$LINENO as_lineno_1a=$LINENO
  as_lineno_2=$LINENO as_lineno_2a=$LINENO
  eval 'test "x$as_lineno_1'$as_run'" != "x$as_lineno_2'$as_run'" &&
  test "x`expr $as_lineno_1'$as_run' + 1`" = "x$as_lineno_2'$as_run'"' || {
  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { printf "%s\n" "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }

  # If we had to re-execute with $CONFIG_SHELL, we're ensured to have
  # already done that, so ensure we don't try to do so again and fall
  # in an infinite loop.  This has already happened in practice.
  _as_can_reexec=no; export _as_can_reexec
  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}


# Determine whether it's possible to make 'echo' print without a newline.
# These variables are no longer used directly by Autoconf, but are AC_SUBSTed
# for compatibility with existing Makefiles.
ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

# For backward compatibility with old third-party macros, we provide
# the shell variables $as_echo and $as_echo_n.  New code should use
# AS_ECHO(["message"]) and AS_ECHO_N(["message"]), respectively.
as_echo='printf %s\n'
as_echo_n='printf %s'


rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -pR'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -pR'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -pR'
  fi
else
  as_ln_s='cp -pR'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

as_test_x='test -x'
as_executable_p=as_fn_executable_p

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"





SHELL=${CONFIG_SHELL-/bin/sh}

# How were we run?
at_cli_args="$@"


# Not all shells have the 'times' builtin; the subshell is needed to make
# sure we discard the 'times: not found' message from the shell.
at_times_p=false
(times) >/dev/null 2>&1 && at_times_p=:

# CLI Arguments to pass to the debugging scripts.
at_debug_args=
# -e sets to true
at_errexit_p=false
# Shall we be verbose?  ':' means no, empty means yes.
at_verbose=:
at_quiet=
# Running several jobs in parallel, 0 means as many as test groups.
at_jobs=1
at_traceon=:
at_trace_echo=:
at_check_filter_trace=:

# Shall we keep the debug scripts?  Must be `:' when the suite is
# run by a debug script, so that the script doesn't remove itself.
at_debug_p=false
# Display help message?
at_help_p=false
# Display the version message?
at_version_p=false
# List test groups?
at_list_p=false
# --clean
at_clean=false
# Test groups to run
at_groups=
# Whether to rerun failed tests.
at_recheck=
# Whether a write failure occurred
at_write_fail=0

# The directory we run the suite in.  Default to . if no -C option.
at_dir=`pwd`
# An absolute reference to this testsuite script.
case $as_myself in
  [\\/]* | ?:[\\/]* ) at_myself=$as_myself ;;
  * ) at_myself=$at_dir/$as_myself ;;
esac
# Whether -C is in effect.
at_change_dir=false

# Whether to enable colored test results.
at_color=auto
# As many question marks as there are digits in the last test group number.
# Used to normalize the test group numbers so that `ls' lists them in
# numerical order.
at_format='???'
# Description of all the test groups.
at_help_all="1;input.at:25;do not overwrite .fig file;fig2dev.c;
2;input.at:33;Use \"-\" for stdin;diversions;
3;input.at:39;Use \"-\" for stdout;diversions;
4;input.at:45;Use \"- -\" for stdin and stdout;diversions;
5;input.at:51;Guess jpeg output format from output filename;read.c;
6;input.at:58;Guess tiff output format from output filename;read.c;
7;input.at:68;accept correct hexadecimal rgb-values;colors hex;
8;input.at:80;fail on malformed hexadecimal rgb-values;colors hex;
9;input.at:91;use built-in color database, blanks in names;colors names;
10;input.at:98;\$i18ndir/cs_CZ.ps must exist;installpath;
11;input.at:118;name in fig file img.gz, file img.gz, pipe ok;readpics gz imgpipe;
12;input.at:128;name in fig file img.Z, file img.Z, no pipe;readpics z imgfile;
13;input.at:137;name in fig file img, file img.gz, pipe ok;readpics gz imgpipe;
14;input.at:146;name in fig file img, file img.z, no pipe;readpics z imgfile;
15;input.at:154;name in fig file img, file img.Z, pipe ok;readpics z imgpipe;
16;input.at:163;absolute path in fig file, pipe ok;readpics fullpath imgpipe;
17;input.at:172;long image name, non-existing file, ticket #125;readpics;
18;input.at:183;non-existing file with suffix (.Z), ticket #126;readpics;
19;read.at:22;co-incident points;read.c coincident;
20;read.at:35;open rectangle;read.c open;
21;read.at:46;open arc box;read.c open;
22;read.at:57;open polygon;read.c open;
23;read.at:68;convert box to polygon;read.c polygon;
24;read.at:79;convert malformed, open box to a polygon;read.c open polygon;
25;read.at:91;convert box with one point to polyline;read.c tk;
26;read.at:102;fail on a malformed arc-box;read.c malformed arc-box;
27;read.at:113;fail on a distorted arc-box;read.c distorted arc-box;
28;read.at:124;fail on a distorted arc-box;read.c distorted arc-box;
29;read.at:135;remove arrow tips from single point;read.c polyline;
30;read.at:149;remove arrow tips on polygon with single point;read.c polygon svg;
31;read.at:162;reject huge arrow-type, ticket #57;arrow.c arrow;
32;read.at:174;convert short polygon to polyline, ticket #56;read.c polygon;
33;read.at:185;reject negative font type;read.c font;
34;read.at:195;allow negative circle or ellipse radii;read.c ellipse;
35;read.at:204;reject huge arc radius, ticket #133;read.c arc;
36;read.at:216;survive debian bugs #881143, #881144;font pic tikz;
37;read.at:245;reject out-of-range pattern, debian bug #881396;read.c;
38;read.at:255;survive debian bug #890016;read1_3.c;
39;read.at:279;ignore too many comment lines, ticket #25;read.c;
40;read.at:299;correctly free invalid line object, ticket #26;read1_3.c;
41;read.at:310;correctly free invalid spline, ticket #27;read.c;
42;read.at:322;allow last line without newline, ticket #28;read.c;
43;read.at:330;correctly free invalid line object;read.c;
44;read.at:342;correctly free invalid line with picture;read.c;
45;read.at:354;ignore splines with one point, ticket #29;read.c;
46;read.at:365;ignore splines with one point in format 1.3;read1_3.c;
47;read.at:376;ignore splines with one point in format 2, #129;read.c;
48;read.at:388;accept closed splines with three points;read.c;
49;read.at:399;set invalid color number to default, ticket #30;read.c;
50;read.at:411;set ppi when reading fig files format 1.3;read1_3.c;
51;read.at:421;process circle arrow at mag > 42, ticket #52;bound.c;
52;read.at:444;allow text ending with multiple ^A, ticket #55;read.c;
53;read.at:454;reject too long papersize specification;read.c;
54;read.at:468;allow tex font -1, tickets #71, #75, #81;pict2e tikz;
55;read.at:481;reject ASCII NUL ('\\0') in input, ticket #80;read.c svg;
56;read.at:488;reject out of range text angle, ticket #76;read.c pstricks;
57;read.at:498;reject out-of-range pattern fills, ticket #63;read.c cgm;
58;read.at:509;allow files end without eol, tickets #83, #84;read.c;
59;read.at:520;do not reach beyond buffer, ticket #85;read.c;
60;read.at:527;reject negative font size, ticket #86;read.c;
61;read.at:534;reject huge spline controls values, #65, #127;read.c;
62;read.at:555;prepend fig file path to picture file name;read.c picfilename;
63;output.at:24;Write complete output file in page mode (-P);epic;
64;output.at:31;allow polygons with four points;gbx;
65;output.at:43;compare arrow tips with template;eps arrows;
66;output.at:69;do not clip 0-width objects having arrows, #53;eps clip0;
67;output.at:113;honor SOURCE_DATE_EPOCH environment variable;eps creationdate source_date_epoch;
68;output.at:120;fail on text in SOURCE_DATE_EPOCH;eps creationdate source_date_epoch;
69;output.at:170;ignore -G option;pict2e options;
70;output.at:180;accept large coordinates;pict2e;
71;output.at:197;accept arc arrows with zero height, ticket #74;pict2e;
72;output.at:208;compare patterns with template;svg pattern creationdate;
73;output.at:246;compare fills with arrows to template;svg arrows pattern fill creationdate;
74;output.at:254;truncated sub/superscript, tickets #113, #117;read.c svg;
75;output.at:265;omit arrows without points, ticket #115;svg arrow;
76;output.at:278;conditionally allocate \\XFigu;tikz newdimen;
77;output.at:292;pattern with stroke color equal to fill color;tikz pattern;
78;output.at:304;accept large coordinates;tikz;
79;output.at:324;Respect -F option for bitmap outputs;bitmaps;
80;output.at:335;allow default color in ge, cgm output, #72, #73;cgm ge;
81;output.at:343;tk output: allow arbitrarily long text, #134;tk;
82;output.at:353;ptk output: allow arbitrarily long text, #134;ptk;
83;bitmaps.at:25;gif;bitmaps gif;
84;bitmaps.at:34;jpeg;bitmaps jpeg jpg;
85;bitmaps.at:42;pcx;bitmaps pcx;
86;bitmaps.at:50;png;bitmaps png;
87;bitmaps.at:58;png with smoothing;bitmaps png smoothing;
88;bitmaps.at:66;ppm;bitmaps ppm;
89;bitmaps.at:74;tiff;bitmaps tiff tif;
90;bitmaps.at:83;xbm;bitmaps xbm;
91;bitmaps.at:92;xbm with smoothing;bitmaps xbm smoothing;
92;bitmaps.at:101;xpm;bitmaps xpm;
93;bitmaps.at:114;eps with acscii preview;bitmaps tmpfile eps-ascii;
94;bitmaps.at:122;eps with tiff preview;bitmaps tmpfile eps-tiff;
95;bitmaps.at:129;eps with tiff preview, use \"-\" for stdin;diversions;
96;bitmaps.at:136;create ppm, use \"-\" for stdin;diversions;
97;bitmaps.at:145;epsi;embed epsi;
98;bitmaps.at:157;postscript, created by fig2dev;embed ps;
99;bitmaps.at:204;postscript, created by latex;embed ps;
100;bitmaps.at:252;find /MediaBox in pdf file;pdf;
101;bitmaps.at:257;pdf;pdf;
"
# List of the all the test groups.
at_groups_all=`printf "%s\n" "$at_help_all" | sed 's/;.*//'`

# at_fn_validate_ranges NAME...
# -----------------------------
# Validate and normalize the test group number contained in each variable
# NAME. Leading zeroes are treated as decimal.
at_fn_validate_ranges ()
{
  for at_grp
  do
    eval at_value=\$$at_grp
    if test $at_value -lt 1 || test $at_value -gt 101; then
      printf "%s\n" "invalid test group: $at_value" >&2
      exit 1
    fi
    case $at_value in
      0*) # We want to treat leading 0 as decimal, like expr and test, but
	  # AS_VAR_ARITH treats it as octal if it uses $(( )).
	  # With XSI shells, ${at_value#${at_value%%[1-9]*}} avoids the
	  # expr fork, but it is not worth the effort to determine if the
	  # shell supports XSI when the user can just avoid leading 0.
	  eval $at_grp='`expr $at_value + 0`' ;;
    esac
  done
}
# List of the tested programs.
at_tested='"fig2dev"'


at_prev=
for at_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$at_prev"; then
    at_option=$at_prev=$at_option
    at_prev=
  fi

  case $at_option in
  *=?*) at_optarg=`expr "X$at_option" : '[^=]*=\(.*\)'` ;;
  *)    at_optarg= ;;
  esac

  case $at_option in
    --help | -h )
	at_help_p=:
	;;

    --list | -l )
	at_list_p=:
	;;

    --version | -V )
	at_version_p=:
	;;

    --clean | -c )
	at_clean=:
	;;

    --color )
	at_color=always
	;;
    --color=* )
	case $at_optarg in
	no | never | none) at_color=never ;;
	auto | tty | if-tty) at_color=auto ;;
	always | yes | force) at_color=always ;;
	*) at_optname=`echo " $at_option" | sed 's/^ //; s/=.*//'`
	   as_fn_error $? "unrecognized argument to $at_optname: $at_optarg" ;;
	esac
	;;

    --debug | -d )
	at_debug_p=:
	;;

    --errexit | -e )
	at_debug_p=:
	at_errexit_p=:
	;;

    --verbose | -v )
	at_verbose=; at_quiet=:
	;;

    --trace | -x )
	at_traceon='set -x'
	at_trace_echo=echo
	at_check_filter_trace=at_fn_filter_trace
	;;

    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] | [0-9][0-9][0-9][0-9])
	at_fn_validate_ranges at_option
	as_fn_append at_groups "$at_option$as_nl"
	;;

    # Ranges
    [0-9]- | [0-9][0-9]- | [0-9][0-9][0-9]- | [0-9][0-9][0-9][0-9]-)
	at_range_start=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_start
	at_range=`printf "%s\n" "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,$p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    -[0-9] | -[0-9][0-9] | -[0-9][0-9][0-9] | -[0-9][0-9][0-9][0-9])
	at_range_end=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_end
	at_range=`printf "%s\n" "$at_groups_all" | \
	  sed -ne '1,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    [0-9]-[0-9] | [0-9]-[0-9][0-9] | [0-9]-[0-9][0-9][0-9] | \
    [0-9]-[0-9][0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9] | \
    [0-9][0-9]-[0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] )
	at_range_start=`expr $at_option : '\(.*\)-'`
	at_range_end=`expr $at_option : '.*-\(.*\)'`
	if test $at_range_start -gt $at_range_end; then
	  at_tmp=$at_range_end
	  at_range_end=$at_range_start
	  at_range_start=$at_tmp
	fi
	at_fn_validate_ranges at_range_start at_range_end
	at_range=`printf "%s\n" "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    # Directory selection.
    --directory | -C )
	at_prev=--directory
	;;
    --directory=* )
	at_change_dir=:
	at_dir=$at_optarg
	if test x- = "x$at_dir" ; then
	  at_dir=./-
	fi
	;;

    # Parallel execution.
    --jobs | -j )
	at_jobs=0
	;;
    --jobs=* | -j[0-9]* )
	if test -n "$at_optarg"; then
	  at_jobs=$at_optarg
	else
	  at_jobs=`expr X$at_option : 'X-j\(.*\)'`
	fi
	case $at_jobs in *[!0-9]*)
	  at_optname=`echo " $at_option" | sed 's/^ //; s/[0-9=].*//'`
	  as_fn_error $? "non-numeric argument to $at_optname: $at_jobs" ;;
	esac
	;;

    # Keywords.
    --keywords | -k )
	at_prev=--keywords
	;;
    --keywords=* )
	at_groups_selected=$at_help_all
	at_save_IFS=$IFS
	IFS=,
	set X $at_optarg
	shift
	IFS=$at_save_IFS
	for at_keyword
	do
	  at_invert=
	  case $at_keyword in
	  '!'*)
	    at_invert="-v"
	    at_keyword=`expr "X$at_keyword" : 'X!\(.*\)'`
	    ;;
	  esac
	  # It is on purpose that we match the test group titles too.
	  at_groups_selected=`printf "%s\n" "$at_groups_selected" |
	      grep -i $at_invert "^[1-9][^;]*;.*[; ]$at_keyword[ ;]"`
	done
	# Smash the keywords.
	at_groups_selected=`printf "%s\n" "$at_groups_selected" | sed 's/;.*//'`
	as_fn_append at_groups "$at_groups_selected$as_nl"
	;;
    --recheck)
	at_recheck=:
	;;

    *=*)
	at_envvar=`expr "x$at_option" : 'x\([^=]*\)='`
	# Reject names that are not valid shell variable names.
	case $at_envvar in
	  '' | [0-9]* | *[!_$as_cr_alnum]* )
	    as_fn_error $? "invalid variable name: \`$at_envvar'" ;;
	esac
	at_value=`printf "%s\n" "$at_optarg" | sed "s/'/'\\\\\\\\''/g"`
	# Export now, but save eval for later and for debug scripts.
	export $at_envvar
	as_fn_append at_debug_args " $at_envvar='$at_value'"
	;;

     *) printf "%s\n" "$as_me: invalid option: $at_option" >&2
	printf "%s\n" "Try \`$0 --help' for more information." >&2
	exit 1
	;;
  esac
done

# Verify our last option didn't require an argument
if test -n "$at_prev"
then :
  as_fn_error $? "\`$at_prev' requires an argument"
fi

# The file containing the suite.
at_suite_log=$at_dir/$as_me.log

# Selected test groups.
if test -z "$at_groups$at_recheck"; then
  at_groups=$at_groups_all
else
  if test -n "$at_recheck" && test -r "$at_suite_log"; then
    at_oldfails=`sed -n '
      /^Failed tests:$/,/^Skipped tests:$/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^Unexpected passes:$/,/^## Detailed failed tests/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^## Detailed failed tests/q
      ' "$at_suite_log"`
    as_fn_append at_groups "$at_oldfails$as_nl"
  fi
  # Sort the tests, removing duplicates.
  at_groups=`printf "%s\n" "$at_groups" | sort -nu | sed '/^$/d'`
fi

if test x"$at_color" = xalways \
   || { test x"$at_color" = xauto && test -t 1; }; then
  at_red=`printf '\033[0;31m'`
  at_grn=`printf '\033[0;32m'`
  at_lgn=`printf '\033[1;32m'`
  at_blu=`printf '\033[1;34m'`
  at_std=`printf '\033[m'`
else
  at_red= at_grn= at_lgn= at_blu= at_std=
fi

# Help message.
if $at_help_p; then
  cat <<_ATEOF || at_write_fail=1
Usage: $0 [OPTION]... [VARIABLE=VALUE]... [TESTS]

Run all the tests, or the selected TESTS, given by numeric ranges, and
save a detailed log file.  Upon failure, create debugging scripts.

Do not change environment variables directly.  Instead, set them via
command line arguments.  Set \`AUTOTEST_PATH' to select the executables
to exercise.  Each relative directory is expanded as build and source
directories relative to the top level of this distribution.
E.g., from within the build directory /tmp/foo-1.0, invoking this:

  $ $0 AUTOTEST_PATH=bin

is equivalent to the following, assuming the source directory is /src/foo-1.0:

  PATH=/tmp/foo-1.0/bin:/src/foo-1.0/bin:\$PATH $0
_ATEOF
cat <<_ATEOF || at_write_fail=1

Operation modes:
  -h, --help     print the help message, then exit
  -V, --version  print version number, then exit
  -c, --clean    remove all the files this test suite might create and exit
  -l, --list     describes all the tests, or the selected TESTS
_ATEOF
cat <<_ATEOF || at_write_fail=1

Execution tuning:
  -C, --directory=DIR
                 change to directory DIR before starting
      --color[=never|auto|always]
                 disable colored test results, or enable even without terminal
  -j, --jobs[=N]
                 Allow N jobs at once; infinite jobs with no arg (default 1)
  -k, --keywords=KEYWORDS
                 select the tests matching all the comma-separated KEYWORDS
                 multiple \`-k' accumulate; prefixed \`!' negates a KEYWORD
      --recheck  select all tests that failed or passed unexpectedly last time
  -e, --errexit  abort as soon as a test fails; implies --debug
  -v, --verbose  force more detailed output
                 default for debugging scripts
  -d, --debug    inhibit clean up and top-level logging
                 default for debugging scripts
  -x, --trace    enable tests shell tracing
_ATEOF
cat <<_ATEOF || at_write_fail=1

Report bugs to <thomas.loimer@tuwien.ac.at>.
fig2dev home page: <https://sourceforge.net/projects/mcj>.
_ATEOF
  exit $at_write_fail
fi

# List of tests.
if $at_list_p; then
  cat <<_ATEOF || at_write_fail=1
fig2dev 3.2.8b test suite test groups:

 NUM: FILE-NAME:LINE     TEST-GROUP-NAME
      KEYWORDS

_ATEOF
  # Pass an empty line as separator between selected groups and help.
  printf "%s\n" "$at_groups$as_nl$as_nl$at_help_all" |
    awk 'NF == 1 && FS != ";" {
	   selected[$ 1] = 1
	   next
	 }
	 /^$/ { FS = ";" }
	 NF > 0 {
	   if (selected[$ 1]) {
	     printf " %3d: %-18s %s\n", $ 1, $ 2, $ 3
	     if ($ 4) {
	       lmax = 79
	       indent = "     "
	       line = indent
	       len = length (line)
	       n = split ($ 4, a, " ")
	       for (i = 1; i <= n; i++) {
		 l = length (a[i]) + 1
		 if (i > 1 && len + l > lmax) {
		   print line
		   line = indent " " a[i]
		   len = length (line)
		 } else {
		   line = line " " a[i]
		   len += l
		 }
	       }
	       if (n)
		 print line
	     }
	   }
	 }' || at_write_fail=1
  exit $at_write_fail
fi
if $at_version_p; then
  printf "%s\n" "$as_me (fig2dev 3.2.8b)" &&
  cat <<\_ATEOF || at_write_fail=1

Fig2dev: Translate Fig code to various Devices
Copyright (c) 1991 by Micah Beck
Parts Copyright (c) 1985-1988 by Supoj Sutanthavibul
Parts Copyright (c) 1989-2015 by Brian V. Smith
Parts Copyright (c) 2015-2018 by Thomas Loimer

Any party obtaining a copy of these files is granted, free of charge, a
full and unrestricted irrevocable, world-wide, paid up, royalty-free,
nonexclusive right and license to deal in this software and documentation
files (the "Software"), including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense and/or sell copies
of the Software, and to permit persons who receive copies from any such
party to do so, with the only requirement being that the above copyright
and this permission notice remain intact.


Copyright (C) 2021 Free Software Foundation, Inc.
This test suite is free software; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.
_ATEOF
  exit $at_write_fail
fi

# Should we print banners?  Yes if more than one test is run.
case $at_groups in #(
  *$as_nl* )
      at_print_banners=: ;; #(
  * ) at_print_banners=false ;;
esac
# Text for banner N, set to a single space once printed.
# Banner 1. input.at:23
# Category starts at test group 1.
at_banner_text_1="Correctly process the command line."
# Banner 2. input.at:66
# Category starts at test group 7.
at_banner_text_2="Parse color specifications (test lookup_X_color() in colors.c)"
# Banner 3. input.at:97
# Category starts at test group 10.
at_banner_text_3="Read installed files."
# Banner 4. input.at:104
# Category starts at test group 11.
at_banner_text_4="Find and decompress embedded image files."
# Banner 5. read.at:20
# Category starts at test group 19.
at_banner_text_5="Sanitize and harden input."
# Banner 6. read.at:553
# Category starts at test group 62.
at_banner_text_6="Dynamically allocate picture file name."
# Banner 7. output.at:22
# Category starts at test group 63.
at_banner_text_7="Test epic/eepic output language."
# Banner 8. output.at:29
# Category starts at test group 64.
at_banner_text_8="Test Gerber output language."
# Banner 9. output.at:41
# Category starts at test group 65.
at_banner_text_9="Test PostScript output language."
# Banner 10. output.at:129
# Category starts at test group 69.
at_banner_text_10="Test pict2e output language."
# Banner 11. output.at:207
# Category starts at test group 72.
at_banner_text_11="Test svg output language."
# Banner 12. output.at:276
# Category starts at test group 76.
at_banner_text_12="Test tikz output language."
# Banner 13. output.at:322
# Category starts at test group 79.
at_banner_text_13="Test other output languages."
# Banner 14. bitmaps.at:20
# Category starts at test group 83.
at_banner_text_14="Create and embed bitmaps in fig-file."
# Banner 15. bitmaps.at:110
# Category starts at test group 93.
at_banner_text_15="Creation of temporary files and diversions."
# Banner 16. bitmaps.at:143
# Category starts at test group 97.
at_banner_text_16="Embed postscript variants."

# Take any -C into account.
if $at_change_dir ; then
  test x != "x$at_dir" && cd "$at_dir" \
    || as_fn_error $? "unable to change directory"
  at_dir=`pwd`
fi

# Load the config files for any default variable assignments.
for at_file in atconfig atlocal
do
  test -r $at_file || continue
  . ./$at_file || as_fn_error $? "invalid content: $at_file"
done

# Autoconf <=2.59b set at_top_builddir instead of at_top_build_prefix:
: "${at_top_build_prefix=$at_top_builddir}"

# Perform any assignments requested during argument parsing.
eval "$at_debug_args"

# atconfig delivers names relative to the directory the test suite is
# in, but the groups themselves are run in testsuite-dir/group-dir.
if test -n "$at_top_srcdir"; then
  builddir=../..
  for at_dir_var in srcdir top_srcdir top_build_prefix
  do
    eval at_val=\$at_$at_dir_var
    case $at_val in
      [\\/$]* | ?:[\\/]* ) at_prefix= ;;
      *) at_prefix=../../ ;;
    esac
    eval "$at_dir_var=\$at_prefix\$at_val"
  done
fi

## -------------------- ##
## Directory structure. ##
## -------------------- ##

# This is the set of directories and files used by this script
# (non-literals are capitalized):
#
# TESTSUITE         - the testsuite
# TESTSUITE.log     - summarizes the complete testsuite run
# TESTSUITE.dir/    - created during a run, remains after -d or failed test
# + at-groups/      - during a run: status of all groups in run
# | + NNN/          - during a run: meta-data about test group NNN
# | | + check-line  - location (source file and line) of current AT_CHECK
# | | + status      - exit status of current AT_CHECK
# | | + stdout      - stdout of current AT_CHECK
# | | + stder1      - stderr, including trace
# | | + stderr      - stderr, with trace filtered out
# | | + test-source - portion of testsuite that defines group
# | | + times       - timestamps for computing duration
# | | + pass        - created if group passed
# | | + xpass       - created if group xpassed
# | | + fail        - created if group failed
# | | + xfail       - created if group xfailed
# | | + skip        - created if group skipped
# + at-stop         - during a run: end the run if this file exists
# + at-source-lines - during a run: cache of TESTSUITE line numbers for extraction
# + 0..NNN/         - created for each group NNN, remains after -d or failed test
# | + TESTSUITE.log - summarizes the group results
# | + ...           - files created during the group

# The directory the whole suite works in.
# Should be absolute to let the user `cd' at will.
at_suite_dir=$at_dir/$as_me.dir
# The file containing the suite ($at_dir might have changed since earlier).
at_suite_log=$at_dir/$as_me.log
# The directory containing helper files per test group.
at_helper_dir=$at_suite_dir/at-groups
# Stop file: if it exists, do not start new jobs.
at_stop_file=$at_suite_dir/at-stop
# The fifo used for the job dispatcher.
at_job_fifo=$at_suite_dir/at-job-fifo

if $at_clean; then
  test -d "$at_suite_dir" &&
    find "$at_suite_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
  rm -f -r "$at_suite_dir" "$at_suite_log"
  exit $?
fi

# Don't take risks: use only absolute directories in PATH.
#
# For stand-alone test suites (ie. atconfig was not found),
# AUTOTEST_PATH is relative to `.'.
#
# For embedded test suites, AUTOTEST_PATH is relative to the top level
# of the package.  Then expand it into build/src parts, since users
# may create executables in both places.
AUTOTEST_PATH=`printf "%s\n" "$AUTOTEST_PATH" | sed "s|:|$PATH_SEPARATOR|g"`
at_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $AUTOTEST_PATH $PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    test -n "$at_path" && as_fn_append at_path $PATH_SEPARATOR
case $as_dir in
  [\\/]* | ?:[\\/]* )
    as_fn_append at_path "$as_dir"
    ;;
  * )
    if test -z "$at_top_build_prefix"; then
      # Stand-alone test suite.
      as_fn_append at_path "$as_dir"
    else
      # Embedded test suite.
      as_fn_append at_path "$at_top_build_prefix$as_dir$PATH_SEPARATOR"
      as_fn_append at_path "$at_top_srcdir/$as_dir"
    fi
    ;;
esac
  done
IFS=$as_save_IFS


# Now build and simplify PATH.
#
# There might be directories that don't exist, but don't redirect
# builtins' (eg., cd) stderr directly: Ultrix's sh hates that.
at_new_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $at_path
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    test -d "$as_dir" || continue
case $as_dir in
  [\\/]* | ?:[\\/]* ) ;;
  * ) as_dir=`(cd "$as_dir" && pwd) 2>/dev/null` ;;
esac
case $PATH_SEPARATOR$at_new_path$PATH_SEPARATOR in
  *$PATH_SEPARATOR$as_dir$PATH_SEPARATOR*) ;;
  $PATH_SEPARATOR$PATH_SEPARATOR) at_new_path=$as_dir ;;
  *) as_fn_append at_new_path "$PATH_SEPARATOR$as_dir" ;;
esac
  done
IFS=$as_save_IFS

PATH=$at_new_path
export PATH

# Setting up the FDs.



# 5 is the log file.  Not to be overwritten if `-d'.
if $at_debug_p; then
  at_suite_log=/dev/null
else
  : >"$at_suite_log"
fi
exec 5>>"$at_suite_log"

# Banners and logs.
printf "%s\n" "## -------------------------- ##
## fig2dev 3.2.8b test suite. ##
## -------------------------- ##"
{
  printf "%s\n" "## -------------------------- ##
## fig2dev 3.2.8b test suite. ##
## -------------------------- ##"
  echo

  printf "%s\n" "$as_me: command line was:"
  printf "%s\n" "  \$ $0 $at_cli_args"
  echo

  # If ChangeLog exists, list a few lines in case it might help determining
  # the exact version.
  if test -n "$at_top_srcdir" && test -f "$at_top_srcdir/ChangeLog"; then
    printf "%s\n" "## ---------- ##
## ChangeLog. ##
## ---------- ##"
    echo
    sed 's/^/| /;10q' "$at_top_srcdir/ChangeLog"
    echo
  fi

  {
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    printf "%s\n" "PATH: $as_dir"
  done
IFS=$as_save_IFS

}
  echo

  # Contents of the config files.
  for at_file in atconfig atlocal
  do
    test -r $at_file || continue
    printf "%s\n" "$as_me: $at_file:"
    sed 's/^/| /' $at_file
    echo
  done
} >&5


## ------------------------- ##
## Autotest shell functions. ##
## ------------------------- ##

# at_fn_banner NUMBER
# -------------------
# Output banner NUMBER, provided the testsuite is running multiple groups and
# this particular banner has not yet been printed.
at_fn_banner ()
{
  $at_print_banners || return 0
  eval at_banner_text=\$at_banner_text_$1
  test "x$at_banner_text" = "x " && return 0
  eval "at_banner_text_$1=\" \""
  if test -z "$at_banner_text"; then
    $at_first || echo
  else
    printf "%s\n" "$as_nl$at_banner_text$as_nl"
  fi
} # at_fn_banner

# at_fn_check_prepare_notrace REASON LINE
# ---------------------------------------
# Perform AT_CHECK preparations for the command at LINE for an untraceable
# command; REASON is the reason for disabling tracing.
at_fn_check_prepare_notrace ()
{
  $at_trace_echo "Not enabling shell tracing (command contains $1)"
  printf "%s\n" "$2" >"$at_check_line_file"
  at_check_trace=: at_check_filter=:
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_trace LINE
# ------------------------------
# Perform AT_CHECK preparations for the command at LINE for a traceable
# command.
at_fn_check_prepare_trace ()
{
  printf "%s\n" "$1" >"$at_check_line_file"
  at_check_trace=$at_traceon at_check_filter=$at_check_filter_trace
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_dynamic COMMAND LINE
# ----------------------------------------
# Decide if COMMAND at LINE is traceable at runtime, and call the appropriate
# preparation function.
at_fn_check_prepare_dynamic ()
{
  case $1 in
    *$as_nl*)
      at_fn_check_prepare_notrace 'an embedded newline' "$2" ;;
    *)
      at_fn_check_prepare_trace "$2" ;;
  esac
}

# at_fn_filter_trace
# ------------------
# Remove the lines in the file "$at_stderr" generated by "set -x" and print
# them to stderr.
at_fn_filter_trace ()
{
  mv "$at_stderr" "$at_stder1"
  grep '^ *+' "$at_stder1" >&2
  grep -v '^ *+' "$at_stder1" >"$at_stderr"
}

# at_fn_log_failure FILE-LIST
# ---------------------------
# Copy the files in the list on stdout with a "> " prefix, and exit the shell
# with a failure exit code.
at_fn_log_failure ()
{
  for file
    do printf "%s\n" "$file:"; sed 's/^/> /' "$file"; done
  echo 1 > "$at_status_file"
  exit 1
}

# at_fn_check_skip EXIT-CODE LINE
# -------------------------------
# Check whether EXIT-CODE is a special exit code (77 or 99), and if so exit
# the test group subshell with that same exit code. Use LINE in any report
# about test failure.
at_fn_check_skip ()
{
  case $1 in
    99) echo 99 > "$at_status_file"; at_failed=:
	printf "%s\n" "$2: hard failure"; exit 99;;
    77) echo 77 > "$at_status_file"; exit 77;;
  esac
}

# at_fn_check_status EXPECTED EXIT-CODE LINE
# ------------------------------------------
# Check whether EXIT-CODE is the EXPECTED exit code, and if so do nothing.
# Otherwise, if it is 77 or 99, exit the test group subshell with that same
# exit code; if it is anything else print an error message referring to LINE,
# and fail the test.
at_fn_check_status ()
{
  case $2 in
    $1 ) ;;
    77) echo 77 > "$at_status_file"; exit 77;;
    99) echo 99 > "$at_status_file"; at_failed=:
	printf "%s\n" "$3: hard failure"; exit 99;;
    *) printf "%s\n" "$3: exit code was $2, expected $1"
      at_failed=:;;
  esac
}

# at_fn_diff_devnull FILE
# -----------------------
# Emit a diff between /dev/null and FILE. Uses "test -s" to avoid useless diff
# invocations.
at_fn_diff_devnull ()
{
  test -s "$1" || return 0
  $at_diff "$at_devnull" "$1"
}

# at_fn_test NUMBER
# -----------------
# Parse out test NUMBER from the tail of this file.
at_fn_test ()
{
  eval at_sed=\$at_sed$1
  sed "$at_sed" "$at_myself" > "$at_test_source"
}

# at_fn_create_debugging_script
# -----------------------------
# Create the debugging script $at_group_dir/run which will reproduce the
# current test group.
at_fn_create_debugging_script ()
{
  {
    echo "#! /bin/sh" &&
    echo 'test ${ZSH_VERSION+y} && alias -g '\''${1+"$@"}'\''='\''"$@"'\''' &&
    printf "%s\n" "cd '$at_dir'" &&
    printf "%s\n" "exec \${CONFIG_SHELL-$SHELL} \"$at_myself\" -v -d $at_debug_args $at_group \${1+\"\$@\"}" &&
    echo 'exit 1'
  } >"$at_group_dir/run" &&
  chmod +x "$at_group_dir/run"
}

## -------------------------------- ##
## End of autotest shell functions. ##
## -------------------------------- ##
{
  printf "%s\n" "## ---------------- ##
## Tested programs. ##
## ---------------- ##"
  echo
} >&5

# Report what programs are being tested.
for at_program in : `eval echo $at_tested`
do
  case $at_program in #(
  :) :
    continue ;; #(
  [\\/]* | ?:[\\/]*) :
    at_program_=$at_program ;; #(
  *) :
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  case $as_dir in #(((
    '') as_dir=./ ;;
    */) ;;
    *) as_dir=$as_dir/ ;;
  esac
    test -f "$as_dir$at_program" && break
  done
IFS=$as_save_IFS

    at_program_=$as_dir$at_program ;;
esac

  if test -f "$at_program_"; then
    {
      printf "%s\n" "$at_srcdir/testsuite.at:20: $at_program_ --version"
      "$at_program_" --version </dev/null
      echo
    } >&5 2>&1
  else
    as_fn_error $? "cannot find $at_program" "$LINENO" 5
  fi
done

{
  printf "%s\n" "## ------------------ ##
## Running the tests. ##
## ------------------ ##"
} >&5

at_start_date=`date`
at_start_time=`date +%s 2>/dev/null`
printf "%s\n" "$as_me: starting at: $at_start_date" >&5

# Create the master directory if it doesn't already exist.
as_dir="$at_suite_dir"; as_fn_mkdir_p ||
  as_fn_error $? "cannot create \`$at_suite_dir'" "$LINENO" 5

# Can we diff with `/dev/null'?  DU 5.0 refuses.
if diff /dev/null /dev/null >/dev/null 2>&1; then
  at_devnull=/dev/null
else
  at_devnull=$at_suite_dir/devnull
  >"$at_devnull"
fi

# Use `diff -u' when possible.
if at_diff=`diff -u "$at_devnull" "$at_devnull" 2>&1` && test -z "$at_diff"
then
  at_diff='diff -u'
else
  at_diff=diff
fi

# Get the last needed group.
for at_group in : $at_groups; do :; done

# Extract the start and end lines of each test group at the tail
# of this file
awk '
BEGIN { FS="" }
/^#AT_START_/ {
  start = NR
}
/^#AT_STOP_/ {
  test = substr ($ 0, 10)
  print "at_sed" test "=\"1," start "d;" (NR-1) "q\""
  if (test == "'"$at_group"'") exit
}' "$at_myself" > "$at_suite_dir/at-source-lines" &&
. "$at_suite_dir/at-source-lines" ||
  as_fn_error $? "cannot create test line number cache" "$LINENO" 5
rm -f "$at_suite_dir/at-source-lines"

# Set number of jobs for `-j'; avoid more jobs than test groups.
set X $at_groups; shift; at_max_jobs=$#
if test $at_max_jobs -eq 0; then
  at_jobs=1
fi
if test $at_jobs -ne 1 &&
   { test $at_jobs -eq 0 || test $at_jobs -gt $at_max_jobs; }; then
  at_jobs=$at_max_jobs
fi

# If parallel mode, don't output banners, don't split summary lines.
if test $at_jobs -ne 1; then
  at_print_banners=false
  at_quiet=:
fi

# Set up helper dirs.
rm -rf "$at_helper_dir" &&
mkdir "$at_helper_dir" &&
cd "$at_helper_dir" &&
{ test -z "$at_groups" || mkdir $at_groups; } ||
as_fn_error $? "testsuite directory setup failed" "$LINENO" 5

# Functions for running a test group.  We leave the actual
# test group execution outside of a shell function in order
# to avoid hitting zsh 4.x exit status bugs.

# at_fn_group_prepare
# -------------------
# Prepare for running a test group.
at_fn_group_prepare ()
{
  # The directory for additional per-group helper files.
  at_job_dir=$at_helper_dir/$at_group
  # The file containing the location of the last AT_CHECK.
  at_check_line_file=$at_job_dir/check-line
  # The file containing the exit status of the last command.
  at_status_file=$at_job_dir/status
  # The files containing the output of the tested commands.
  at_stdout=$at_job_dir/stdout
  at_stder1=$at_job_dir/stder1
  at_stderr=$at_job_dir/stderr
  # The file containing the code for a test group.
  at_test_source=$at_job_dir/test-source
  # The file containing dates.
  at_times_file=$at_job_dir/times

  # Be sure to come back to the top test directory.
  cd "$at_suite_dir"

  # Clearly separate the test groups when verbose.
  $at_first || $at_verbose echo

  at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'


  # Create a fresh directory for the next test group, and enter.
  # If one already exists, the user may have invoked ./run from
  # within that directory; we remove the contents, but not the
  # directory itself, so that we aren't pulling the rug out from
  # under the shell's notion of the current directory.
  at_group_dir=$at_suite_dir/$at_group_normalized
  at_group_log=$at_group_dir/$as_me.log
  if test -d "$at_group_dir"
then
  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx {} \;
  rm -fr "$at_group_dir"/* "$at_group_dir"/.[!.] "$at_group_dir"/.??*
fi ||
    { printf "%s\n" "$as_me:${as_lineno-$LINENO}: WARNING: test directory for $at_group_normalized could not be cleaned" >&5
printf "%s\n" "$as_me: WARNING: test directory for $at_group_normalized could not be cleaned" >&2;}
  # Be tolerant if the above `rm' was not able to remove the directory.
  as_dir="$at_group_dir"; as_fn_mkdir_p

  echo 0 > "$at_status_file"

  # In verbose mode, append to the log file *and* show on
  # the standard output; in quiet mode only write to the log.
  if test -z "$at_verbose"; then
    at_tee_pipe='tee -a "$at_group_log"'
  else
    at_tee_pipe='cat >> "$at_group_log"'
  fi
}

# at_fn_group_banner ORDINAL LINE DESC PAD [BANNER]
# -------------------------------------------------
# Declare the test group ORDINAL, located at LINE with group description DESC,
# and residing under BANNER. Use PAD to align the status column.
at_fn_group_banner ()
{
  at_setup_line="$2"
  test -n "$5" && at_fn_banner $5
  at_desc="$3"
  case $1 in
    [0-9])      at_desc_line="  $1: ";;
    [0-9][0-9]) at_desc_line=" $1: " ;;
    *)          at_desc_line="$1: "  ;;
  esac
  as_fn_append at_desc_line "$3$4"
  $at_quiet printf %s "$at_desc_line"
  echo "#                             -*- compilation -*-" >> "$at_group_log"
}

# at_fn_group_postprocess
# -----------------------
# Perform cleanup after running a test group.
at_fn_group_postprocess ()
{
  # Be sure to come back to the suite directory, in particular
  # since below we might `rm' the group directory we are in currently.
  cd "$at_suite_dir"

  if test ! -f "$at_check_line_file"; then
    sed "s/^ */$as_me: WARNING: /" <<_ATEOF
      A failure happened in a test group before any test could be
      run. This means that test suite is improperly designed.  Please
      report this failure to <thomas.loimer@tuwien.ac.at>.
_ATEOF
    printf "%s\n" "$at_setup_line" >"$at_check_line_file"
    at_status=99
  fi
  $at_verbose printf %s "$at_group. $at_setup_line: "
  printf %s "$at_group. $at_setup_line: " >> "$at_group_log"
  case $at_xfail:$at_status in
    yes:0)
	at_msg="UNEXPECTED PASS"
	at_res=xpass
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    no:0)
	at_msg="ok"
	at_res=pass
	at_errexit=false
	at_color=$at_grn
	;;
    *:77)
	at_msg='skipped ('`cat "$at_check_line_file"`')'
	at_res=skip
	at_errexit=false
	at_color=$at_blu
	;;
    no:* | *:99)
	at_msg='FAILED ('`cat "$at_check_line_file"`')'
	at_res=fail
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    yes:*)
	at_msg='expected failure ('`cat "$at_check_line_file"`')'
	at_res=xfail
	at_errexit=false
	at_color=$at_lgn
	;;
  esac
  echo "$at_res" > "$at_job_dir/$at_res"
  # In parallel mode, output the summary line only afterwards.
  if test $at_jobs -ne 1 && test -n "$at_verbose"; then
    printf "%s\n" "$at_desc_line $at_color$at_msg$at_std"
  else
    # Make sure there is a separator even with long titles.
    printf "%s\n" " $at_color$at_msg$at_std"
  fi
  at_log_msg="$at_group. $at_desc ($at_setup_line): $at_msg"
  case $at_status in
    0|77)
      # $at_times_file is only available if the group succeeded.
      # We're not including the group log, so the success message
      # is written in the global log separately.  But we also
      # write to the group log in case they're using -d.
      if test -f "$at_times_file"; then
	at_log_msg="$at_log_msg     ("`sed 1d "$at_times_file"`')'
	rm -f "$at_times_file"
      fi
      printf "%s\n" "$at_log_msg" >> "$at_group_log"
      printf "%s\n" "$at_log_msg" >&5

      # Cleanup the group directory, unless the user wants the files
      # or the success was unexpected.
      if $at_debug_p || test $at_res = xpass; then
	at_fn_create_debugging_script
	if test $at_res = xpass && $at_errexit; then
	  echo stop > "$at_stop_file"
	fi
      else
	if test -d "$at_group_dir"; then
	  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	  rm -fr "$at_group_dir"
	fi
	rm -f "$at_test_source"
      fi
      ;;
    *)
      # Upon failure, include the log into the testsuite's global
      # log.  The failure message is written in the group log.  It
      # is later included in the global log.
      printf "%s\n" "$at_log_msg" >> "$at_group_log"

      # Upon failure, keep the group directory for autopsy, and create
      # the debugging script.  With -e, do not start any further tests.
      at_fn_create_debugging_script
      if $at_errexit; then
	echo stop > "$at_stop_file"
      fi
      ;;
  esac
}


## ------------ ##
## Driver loop. ##
## ------------ ##


if (set -m && set +m && set +b) >/dev/null 2>&1; then
  set +b
  at_job_control_on='set -m' at_job_control_off='set +m' at_job_group=-
else
  at_job_control_on=: at_job_control_off=: at_job_group=
fi

for at_signal in 1 2 15; do
  trap 'set +x; set +e
	$at_job_control_off
	at_signal='"$at_signal"'
	echo stop > "$at_stop_file"
	trap "" $at_signal
	at_pgids=
	for at_pgid in `jobs -p 2>/dev/null`; do
	  at_pgids="$at_pgids $at_job_group$at_pgid"
	done
	test -z "$at_pgids" || kill -$at_signal $at_pgids 2>/dev/null
	wait
	if test "$at_jobs" -eq 1 || test -z "$at_verbose"; then
	  echo >&2
	fi
	at_signame=`kill -l $at_signal 2>&1 || echo $at_signal`
	set x $at_signame
	test 0 -gt 2 && at_signame=$at_signal
	{ printf "%s\n" "$as_me:${as_lineno-$LINENO}: WARNING: caught signal $at_signame, bailing out" >&5
printf "%s\n" "$as_me: WARNING: caught signal $at_signame, bailing out" >&2;}
	as_fn_arith 128 + $at_signal && exit_status=$as_val
	as_fn_exit $exit_status' $at_signal
done

rm -f "$at_stop_file"
at_first=:

if test $at_jobs -ne 1 &&
     rm -f "$at_job_fifo" &&
     test -n "$at_job_group" &&
     ( mkfifo "$at_job_fifo" && trap 'exit 1' PIPE STOP TSTP ) 2>/dev/null
then
  # FIFO job dispatcher.

  trap 'at_pids=
	for at_pid in `jobs -p`; do
	  at_pids="$at_pids $at_job_group$at_pid"
	done
	if test -n "$at_pids"; then
	  at_sig=TSTP
	  test ${TMOUT+y} && at_sig=STOP
	  kill -$at_sig $at_pids 2>/dev/null
	fi
	kill -STOP $$
	test -z "$at_pids" || kill -CONT $at_pids 2>/dev/null' TSTP

  echo
  # Turn jobs into a list of numbers, starting from 1.
  at_joblist=`printf "%s\n" "$at_groups" | sed -n 1,${at_jobs}p`

  set X $at_joblist
  shift
  for at_group in $at_groups; do
    $at_job_control_on 2>/dev/null
    (
      # Start one test group.
      $at_job_control_off
      if $at_first; then
	exec 7>"$at_job_fifo"
      else
	exec 6<&-
      fi
      trap 'set +x; set +e
	    trap "" PIPE
	    echo stop > "$at_stop_file"
	    echo >&7
	    as_fn_exit 141' PIPE
      at_fn_group_prepare
      if cd "$at_group_dir" &&
	 at_fn_test $at_group &&
	 . "$at_test_source"
      then :; else
	{ printf "%s\n" "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
printf "%s\n" "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
	at_failed=:
      fi
      at_fn_group_postprocess
      echo >&7
    ) &
    $at_job_control_off
    if $at_first; then
      at_first=false
      exec 6<"$at_job_fifo" 7>"$at_job_fifo"
    fi
    shift # Consume one token.
    if test $# -gt 0; then :; else
      read at_token <&6 || break
      set x $*
    fi
    test -f "$at_stop_file" && break
  done
  exec 7>&-
  # Read back the remaining ($at_jobs - 1) tokens.
  set X $at_joblist
  shift
  if test $# -gt 0; then
    shift
    for at_job
    do
      read at_token
    done <&6
  fi
  exec 6<&-
  wait
else
  # Run serially, avoid forks and other potential surprises.
  for at_group in $at_groups; do
    at_fn_group_prepare
    if cd "$at_group_dir" &&
       at_fn_test $at_group &&
       . "$at_test_source"; then :; else
      { printf "%s\n" "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
printf "%s\n" "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
      at_failed=:
    fi
    at_fn_group_postprocess
    test -f "$at_stop_file" && break
    at_first=false
  done
fi

# Wrap up the test suite with summary statistics.
cd "$at_helper_dir"

# Use ?..???? when the list must remain sorted, the faster * otherwise.
at_pass_list=`for f in */pass; do echo $f; done | sed '/\*/d; s,/pass,,'`
at_skip_list=`for f in */skip; do echo $f; done | sed '/\*/d; s,/skip,,'`
at_xfail_list=`for f in */xfail; do echo $f; done | sed '/\*/d; s,/xfail,,'`
at_xpass_list=`for f in ?/xpass ??/xpass ???/xpass ????/xpass; do
		 echo $f; done | sed '/?/d; s,/xpass,,'`
at_fail_list=`for f in ?/fail ??/fail ???/fail ????/fail; do
		echo $f; done | sed '/?/d; s,/fail,,'`

set X $at_pass_list $at_xpass_list $at_xfail_list $at_fail_list $at_skip_list
shift; at_group_count=$#
set X $at_xpass_list; shift; at_xpass_count=$#; at_xpass_list=$*
set X $at_xfail_list; shift; at_xfail_count=$#
set X $at_fail_list; shift; at_fail_count=$#; at_fail_list=$*
set X $at_skip_list; shift; at_skip_count=$#

as_fn_arith $at_group_count - $at_skip_count && at_run_count=$as_val
as_fn_arith $at_xpass_count + $at_fail_count && at_unexpected_count=$as_val
as_fn_arith $at_xfail_count + $at_fail_count && at_total_fail_count=$as_val

# Back to the top directory.
cd "$at_dir"
rm -rf "$at_helper_dir"

# Compute the duration of the suite.
at_stop_date=`date`
at_stop_time=`date +%s 2>/dev/null`
printf "%s\n" "$as_me: ending at: $at_stop_date" >&5
case $at_start_time,$at_stop_time in
  [0-9]*,[0-9]*)
    as_fn_arith $at_stop_time - $at_start_time && at_duration_s=$as_val
    as_fn_arith $at_duration_s / 60 && at_duration_m=$as_val
    as_fn_arith $at_duration_m / 60 && at_duration_h=$as_val
    as_fn_arith $at_duration_s % 60 && at_duration_s=$as_val
    as_fn_arith $at_duration_m % 60 && at_duration_m=$as_val
    at_duration="${at_duration_h}h ${at_duration_m}m ${at_duration_s}s"
    printf "%s\n" "$as_me: test suite duration: $at_duration" >&5
    ;;
esac

echo
printf "%s\n" "## ------------- ##
## Test results. ##
## ------------- ##"
echo
{
  echo
  printf "%s\n" "## ------------- ##
## Test results. ##
## ------------- ##"
  echo
} >&5

if test $at_run_count = 1; then
  at_result="1 test"
  at_were=was
else
  at_result="$at_run_count tests"
  at_were=were
fi
if $at_errexit_p && test $at_unexpected_count != 0; then
  if test $at_xpass_count = 1; then
    at_result="$at_result $at_were run, one passed"
  else
    at_result="$at_result $at_were run, one failed"
  fi
  at_result="$at_result unexpectedly and inhibited subsequent tests."
  at_color=$at_red
else
  # Don't you just love exponential explosion of the number of cases?
  at_color=$at_red
  case $at_xpass_count:$at_fail_count:$at_xfail_count in
    # So far, so good.
    0:0:0) at_result="$at_result $at_were successful." at_color=$at_grn ;;
    0:0:*) at_result="$at_result behaved as expected." at_color=$at_lgn ;;

    # Some unexpected failures
    0:*:0) at_result="$at_result $at_were run,
$at_fail_count failed unexpectedly." ;;

    # Some failures, both expected and unexpected
    0:*:1) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    0:*:*) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;

    # No unexpected failures, but some xpasses
    *:0:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly." ;;

    # No expected failures, but failures and xpasses
    *:1:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failure)." ;;
    *:*:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failures)." ;;

    # All of them.
    *:*:1) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    *:*:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;
  esac

  if test $at_skip_count = 0 && test $at_run_count -gt 1; then
    at_result="All $at_result"
  fi
fi

# Now put skips in the mix.
case $at_skip_count in
  0) ;;
  1) at_result="$at_result
1 test was skipped." ;;
  *) at_result="$at_result
$at_skip_count tests were skipped." ;;
esac

if test $at_unexpected_count = 0; then
  echo "$at_color$at_result$at_std"
  echo "$at_result" >&5
else
  echo "${at_color}ERROR: $at_result$at_std" >&2
  echo "ERROR: $at_result" >&5
  {
    echo
    printf "%s\n" "## ------------------------ ##
## Summary of the failures. ##
## ------------------------ ##"

    # Summary of failed and skipped tests.
    if test $at_fail_count != 0; then
      echo "Failed tests:"
      $SHELL "$at_myself" $at_fail_list --list
      echo
    fi
    if test $at_skip_count != 0; then
      echo "Skipped tests:"
      $SHELL "$at_myself" $at_skip_list --list
      echo
    fi
    if test $at_xpass_count != 0; then
      echo "Unexpected passes:"
      $SHELL "$at_myself" $at_xpass_list --list
      echo
    fi
    if test $at_fail_count != 0; then
      printf "%s\n" "## ---------------------- ##
## Detailed failed tests. ##
## ---------------------- ##"
      echo
      for at_group in $at_fail_list
      do
	at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'

	cat "$at_suite_dir/$at_group_normalized/$as_me.log"
	echo
      done
      echo
    fi
    if test -n "$at_top_srcdir"; then
      sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## ${at_top_build_prefix}config.log ##
_ASBOX
      sed 's/^/| /' ${at_top_build_prefix}config.log
      echo
    fi
  } >&5

  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $as_me.log was created. ##
_ASBOX

  echo
  if $at_debug_p; then
    at_msg='per-test log files'
  else
    at_msg="\`${at_testdir+${at_testdir}/}$as_me.log'"
  fi
  at_msg1a=${at_xpass_list:+', '}
  at_msg1=$at_fail_list${at_fail_list:+" failed$at_msg1a"}
  at_msg2=$at_xpass_list${at_xpass_list:+" passed unexpectedly"}

  printf "%s\n" "Please send $at_msg and all information you think might help:

   To: <thomas.loimer@tuwien.ac.at>
   Subject: [fig2dev 3.2.8b] $as_me: $at_msg1$at_msg2

You may investigate any problem if you feel able to do so, in which
case the test suite provides a good starting point.  Its output may
be found below \`${at_testdir+${at_testdir}/}$as_me.dir'.
"
  exit 1
fi

exit 0

## ------------- ##
## Actual tests. ##
## ------------- ##
#AT_START_1
at_fn_group_banner 1 'input.at:25' \
  "do not overwrite .fig file" "                     " 1
at_xfail=no
(
  printf "%s\n" "1. $at_setup_line: testing $at_desc ..."
  $at_traceon


# The ge format produces the smalles output.
{ set +x
printf "%s\n" "$at_srcdir/input.at:28: fig2dev -L ge \$srcdir/data/line.fig nice.figure.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:28"
( $at_check_trace; fig2dev -L ge $srcdir/data/line.fig nice.figure.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Outfile is a .fig file, aborting
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/input.at:28"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1
#AT_START_2
at_fn_group_banner 2 'input.at:33' \
  "Use \"-\" for stdin" "                              " 1
at_xfail=no
(
  printf "%s\n" "2. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/input.at:35: fig2dev -Leps - out.eps <\$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:35"
( $at_check_trace; fig2dev -Leps - out.eps <$srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/input.at:35"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_2
#AT_START_3
at_fn_group_banner 3 'input.at:39' \
  "Use \"-\" for stdout" "                             " 1
at_xfail=no
(
  printf "%s\n" "3. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/input.at:41: fig2dev -Leps \$srcdir/data/line.fig - >out.eps
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:41"
( $at_check_trace; fig2dev -Leps $srcdir/data/line.fig - >out.eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/input.at:41"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_3
#AT_START_4
at_fn_group_banner 4 'input.at:45' \
  "Use \"- -\" for stdin and stdout" "                 " 1
at_xfail=no
(
  printf "%s\n" "4. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/input.at:47: fig2dev -Leps - - <\$srcdir/data/line.fig >out.eps
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:47"
( $at_check_trace; fig2dev -Leps - - <$srcdir/data/line.fig >out.eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/input.at:47"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_4
#AT_START_5
at_fn_group_banner 5 'input.at:51' \
  "Guess jpeg output format from output filename" "  " 1
at_xfail=no
(
  printf "%s\n" "5. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "input.at:53" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/input.at:53"
{ set +x
printf "%s\n" "$at_srcdir/input.at:54: fig2dev \$srcdir/data/line.fig line.jpg
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:54"
( $at_check_trace; fig2dev $srcdir/data/line.fig line.jpg

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/input.at:54"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_5
#AT_START_6
at_fn_group_banner 6 'input.at:58' \
  "Guess tiff output format from output filename" "  " 1
at_xfail=no
(
  printf "%s\n" "6. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "input.at:60" >"$at_check_line_file"
(! $GSEXE --version || \
	( ! pnmtotiff -version && ! convert -version &&  ! gm version)) \
  && at_fn_check_skip 77 "$at_srcdir/input.at:60"
{ set +x
printf "%s\n" "$at_srcdir/input.at:62: fig2dev \$srcdir/data/line.fig line.tif
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:62"
( $at_check_trace; fig2dev $srcdir/data/line.fig line.tif

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/input.at:62"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_6
#AT_START_7
at_fn_group_banner 7 'input.at:68' \
  "accept correct hexadecimal rgb-values" "          " 2
at_xfail=no
(
  printf "%s\n" "7. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/input.at:70: fig2dev -Leps -g'#1e9' \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:70"
( $at_check_trace; fig2dev -Leps -g'#1e9' $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/input.at:70"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/input.at:72: fig2dev -Leps -g'#11e090' \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:72"
( $at_check_trace; fig2dev -Leps -g'#11e090' $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/input.at:72"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/input.at:74: fig2dev -Leps -g'#114ea090c' \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:74"
( $at_check_trace; fig2dev -Leps -g'#114ea090c' $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/input.at:74"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/input.at:76: fig2dev -Leps -g'#1144ea0f90c0' \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:76"
( $at_check_trace; fig2dev -Leps -g'#1144ea0f90c0' $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/input.at:76"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_7
#AT_START_8
at_fn_group_banner 8 'input.at:80' \
  "fail on malformed hexadecimal rgb-values" "       " 2
at_xfail=no
(
  printf "%s\n" "8. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/input.at:82: fig2dev -Leps -g'#144ea0f90c0' \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:82"
( $at_check_trace; fig2dev -Leps -g'#144ea0f90c0' $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Can't parse color '#144ea0f90c0', ignoring background option
" | \
  $at_diff - "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/input.at:82"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/input.at:86: fig2dev -Leps -g'#30g' \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:86"
( $at_check_trace; fig2dev -Leps -g'#30g' $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Can't parse color '#30g', ignoring background option
" | \
  $at_diff - "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/input.at:86"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_8
#AT_START_9
at_fn_group_banner 9 'input.at:91' \
  "use built-in color database, blanks in names" "   " 2
at_xfail=no
(
  printf "%s\n" "9. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/input.at:93: fig2dev -Leps -g'misty rose' \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:93"
( $at_check_trace; fig2dev -Leps -g'misty rose' $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/input.at:93"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_9
#AT_START_10
at_fn_group_banner 10 'input.at:98' \
  "\$i18ndir/cs_CZ.ps must exist" "                   " 3
at_xfail=no
(
  printf "%s\n" "10. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "input.at:100" >"$at_check_line_file"
(test "x$INSTALLCHECK" = xno) \
  && at_fn_check_skip 77 "$at_srcdir/input.at:100"
{ set +x
printf "%s\n" "$at_srcdir/input.at:101: \"\$abs_builddir\"/test1"
at_fn_check_prepare_dynamic "\"$abs_builddir\"/test1" "input.at:101"
( $at_check_trace; "$abs_builddir"/test1
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/input.at:101"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_10
#AT_START_11
at_fn_group_banner 11 'input.at:118' \
  "name in fig file img.gz, file img.gz, pipe ok" "  " 4
at_xfail=no
(
  printf "%s\n" "11. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "input.at:122" >"$at_check_line_file"
(! gunzip --version || ! gzip --version) \
  && at_fn_check_skip 77 "$at_srcdir/input.at:122"
{ set +x
printf "%s\n" "$at_srcdir/input.at:123: gzip -q -c \$srcdir/data/line.eps >line.eps.gz && \\
	\$SED '11 s/eps/eps.gz/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:123"
( $at_check_trace; gzip -q -c $srcdir/data/line.eps >line.eps.gz && \
	$SED '11 s/eps/eps.gz/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/input.at:123"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_11
#AT_START_12
at_fn_group_banner 12 'input.at:128' \
  "name in fig file img.Z, file img.Z, no pipe" "    " 4
at_xfail=no
(
  printf "%s\n" "12. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "input.at:130" >"$at_check_line_file"
(! gunzip --version || ! gzip --version || ! $GSEXE --version || ! pnmtotiff -version) \
  && at_fn_check_skip 77 "$at_srcdir/input.at:130"
{ set +x
printf "%s\n" "$at_srcdir/input.at:131: gzip -q -c \$srcdir/data/line.eps >line.eps.Z && \\
	\$SED '11 s/eps/eps.Z/' \$srcdir/data/boxwimg.fig >boxwimg.fig && \\
	fig2dev -L tiff boxwimg.fig b.tif
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:131"
( $at_check_trace; gzip -q -c $srcdir/data/line.eps >line.eps.Z && \
	$SED '11 s/eps/eps.Z/' $srcdir/data/boxwimg.fig >boxwimg.fig && \
	fig2dev -L tiff boxwimg.fig b.tif

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/input.at:131"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_12
#AT_START_13
at_fn_group_banner 13 'input.at:137' \
  "name in fig file img, file img.gz, pipe ok" "     " 4
at_xfail=no
(
  printf "%s\n" "13. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "input.at:139" >"$at_check_line_file"
(! gunzip --version || ! gzip --version) \
  && at_fn_check_skip 77 "$at_srcdir/input.at:139"
# Use cat, so fig2dev looks in the current dir, not in $srcdir/data
{ set +x
printf "%s\n" "$at_srcdir/input.at:141: gzip -q -c \$srcdir/data/line.eps >line.eps.gz && \\
	cat \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:141"
( $at_check_trace; gzip -q -c $srcdir/data/line.eps >line.eps.gz && \
	cat $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/input.at:141"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_13
#AT_START_14
at_fn_group_banner 14 'input.at:146' \
  "name in fig file img, file img.z, no pipe" "      " 4
at_xfail=no
(
  printf "%s\n" "14. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "input.at:148" >"$at_check_line_file"
(! gunzip --version || ! gzip --version || ! $GSEXE --version || ! pnmtotiff -version) \
  && at_fn_check_skip 77 "$at_srcdir/input.at:148"
{ set +x
printf "%s\n" "$at_srcdir/input.at:149: gzip -q -c \$srcdir/data/line.eps >line.eps.z && \\
	cp \$srcdir/data/boxwimg.fig . && fig2dev -L tiff boxwimg.fig b.tif
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:149"
( $at_check_trace; gzip -q -c $srcdir/data/line.eps >line.eps.z && \
	cp $srcdir/data/boxwimg.fig . && fig2dev -L tiff boxwimg.fig b.tif

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/input.at:149"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_14
#AT_START_15
at_fn_group_banner 15 'input.at:154' \
  "name in fig file img, file img.Z, pipe ok" "      " 4
at_xfail=no
(
  printf "%s\n" "15. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "input.at:156" >"$at_check_line_file"
(! gunzip --version || ! gzip --version) \
  && at_fn_check_skip 77 "$at_srcdir/input.at:156"
# Use cat, so fig2dev looks in the current dir, not in $srcdir/data
{ set +x
printf "%s\n" "$at_srcdir/input.at:158: gzip -q -c \$srcdir/data/line.eps >line.eps.Z && \\
	cat \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:158"
( $at_check_trace; gzip -q -c $srcdir/data/line.eps >line.eps.Z && \
	cat $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/input.at:158"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_15
#AT_START_16
at_fn_group_banner 16 'input.at:163' \
  "absolute path in fig file, pipe ok" "             " 4
at_xfail=no
(
  printf "%s\n" "16. $at_setup_line: testing $at_desc ..."
  $at_traceon


# if the path contains '%', the sed-command below fails
printf "%s\n" "input.at:166" >"$at_check_line_file"
(echo $abs_srcdir | $FGREP %) \
  && at_fn_check_skip 77 "$at_srcdir/input.at:166"
{ set +x
printf "%s\n" "$at_srcdir/input.at:167: \$SED \"11 s%line%\$abs_srcdir/data/line%\" \$srcdir/data/boxwimg.fig | \\
		fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:167"
( $at_check_trace; $SED "11 s%line%$abs_srcdir/data/line%" $srcdir/data/boxwimg.fig | \
		fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/input.at:167"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_16
#AT_START_17
at_fn_group_banner 17 'input.at:172' \
  "long image name, non-existing file, ticket #125" "" 4
at_xfail=no
(
  printf "%s\n" "17. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/input.at:174: fig2dev -Leps <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 -1 -1 0.0 0 0 -1 0 0 5
	0 use a file name that does not exist and is at least 128 characters long - this triggered a bug whereupon the string buffer was freed two times
	 0 0 100 0 100 60 0 60 0 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:174"
( $at_check_trace; fig2dev -Leps <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 -1 -1 0.0 0 0 -1 0 0 5
	0 use a file name that does not exist and is at least 128 characters long - this triggered a bug whereupon the string buffer was freed two times
	 0 0 100 0 100 60 0 60 0 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/input.at:174"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_17
#AT_START_18
at_fn_group_banner 18 'input.at:183' \
  "non-existing file with suffix (.Z), ticket #126" "" 4
at_xfail=no
(
  printf "%s\n" "18. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/input.at:185: fig2dev -Leps <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 -1 -1 0.0 0 0 -1 0 0 5
	0 non-existing.Z
	 0 0 100 0 100 60 0 60 0 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "input.at:185"
( $at_check_trace; fig2dev -Leps <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 -1 -1 0.0 0 0 -1 0 0 5
	0 non-existing.Z
	 0 0 100 0 100 60 0 60 0 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "No such picture file: non-existing.Z
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/input.at:185"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_18
#AT_START_19
at_fn_group_banner 19 'read.at:22' \
  "co-incident points" "                             " 5
at_xfail=no
(
  printf "%s\n" "19. $at_setup_line: testing $at_desc ..."
  $at_traceon



{ set +x
printf "%s\n" "$at_srcdir/read.at:25: fig2dev -L pict2e <<EOF | grep 'polygon\\(([0-9]*,[0-9]*)\\)\\{4\\}'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.000 0 0 -1 0 0 8
	0 10200 1200 10200 1200 10200 1200 9225
	1200 9225 0 9225 0 10200 0 10200
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:25"
( $at_check_trace; fig2dev -L pict2e <<EOF | grep 'polygon\(([0-9]*,[0-9]*)\)\{4\}'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.000 0 0 -1 0 0 8
	0 10200 1200 10200 1200 10200 1200 9225
	1200 9225 0 9225 0 10200 0 10200
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:25"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_19
#AT_START_20
at_fn_group_banner 20 'read.at:35' \
  "open rectangle" "                                 " 5
at_xfail=no
(
  printf "%s\n" "20. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:37: fig2dev -L pict2e <<EOF | grep 'polygon\\(([0-9]*,[0-9]*)\\)\\{4\\}'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.000 0 0 -1 0 0 4
	 0 10200 1200 10200 1200 9225 0 9225
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:37"
( $at_check_trace; fig2dev -L pict2e <<EOF | grep 'polygon\(([0-9]*,[0-9]*)\)\{4\}'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.000 0 0 -1 0 0 4
	 0 10200 1200 10200 1200 9225 0 9225
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "An open rectangle at line 11 - close it.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_20
#AT_START_21
at_fn_group_banner 21 'read.at:46' \
  "open arc box" "                                   " 5
at_xfail=no
(
  printf "%s\n" "21. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:48: fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 4 0 1 -1 -1 50 -1 -1 0.000 0 0 15 0 0 4
	 0 10200 1200 10200 1200 9225 0 9225
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:48"
( $at_check_trace; fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 4 0 1 -1 -1 50 -1 -1 0.000 0 0 15 0 0 4
	 0 10200 1200 10200 1200 9225 0 9225
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "An open rectangle with rounded corners at line 11 - close it.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:48"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_21
#AT_START_22
at_fn_group_banner 22 'read.at:57' \
  "open polygon" "                                   " 5
at_xfail=no
(
  printf "%s\n" "22. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:59: fig2dev -L pict2e <<EOF | grep 'polygon\\(([0-9]*,[0-9]*)\\)\\{4\\}'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 1 -1 -1 50 -1 -1 0.000 0 0 15 0 0 5
	 0 10200 600 9825 1200 10200 1200 9225 0 9225
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:59"
( $at_check_trace; fig2dev -L pict2e <<EOF | grep 'polygon\(([0-9]*,[0-9]*)\)\{4\}'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 1 -1 -1 50 -1 -1 0.000 0 0 15 0 0 5
	 0 10200 600 9825 1200 10200 1200 9225 0 9225
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "An open polygon at line 11 - close it.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:59"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_22
#AT_START_23
at_fn_group_banner 23 'read.at:68' \
  "convert box to polygon" "                         " 5
at_xfail=no
(
  printf "%s\n" "23. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:70: fig2dev -L pict2e <<EOF | grep 'polygon\\(([0-9]*,[0-9]*)\\)\\{3\\}'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.000 0 0 -1 0 0 4
	 0 10200 1200 9225 0 9225 0 10200
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:70"
( $at_check_trace; fig2dev -L pict2e <<EOF | grep 'polygon\(([0-9]*,[0-9]*)\)\{3\}'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.000 0 0 -1 0 0 4
	 0 10200 1200 9225 0 9225 0 10200
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "A rectangle with 3 corners at line 11 - convert to a polygon.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:70"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_23
#AT_START_24
at_fn_group_banner 24 'read.at:79' \
  "convert malformed, open box to a polygon" "       " 5
at_xfail=no
(
  printf "%s\n" "24. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:81: fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.000 0 0 -1 0 0 3
	 0 10200 1200 9225 0 9225
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:81"
( $at_check_trace; fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.000 0 0 -1 0 0 3
	 0 10200 1200 9225 0 9225
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "An open rectangle at line 11 - close it.
A rectangle with 3 corners at line 11 - convert to a polygon.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:81"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_24
#AT_START_25
at_fn_group_banner 25 'read.at:91' \
  "convert box with one point to polyline" "         " 5
at_xfail=no
(
  printf "%s\n" "25. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:93: fig2dev -L tk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.0 0 0 -1 0 0 1
	 0 600
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:93"
( $at_check_trace; fig2dev -L tk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 1 -1 -1 50 -1 -1 0.0 0 0 -1 0 0 1
	 0 600
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "A rectangle with 1 points at line 11 - convert to a polyline.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:93"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_25
#AT_START_26
at_fn_group_banner 26 'read.at:102' \
  "fail on a malformed arc-box" "                    " 5
at_xfail=no
(
  printf "%s\n" "26. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:104: fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 4 0 1 -1 -1 50 -1 -1 0.000 0 0 60 0 0 4
	 0 10200 1200 9225 0 9225 0 10200
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:104"
( $at_check_trace; fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 4 0 1 -1 -1 50 -1 -1 0.000 0 0 60 0 0 4
	 0 10200 1200 9225 0 9225 0 10200
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "A malformed rectangle with rounded corners at line 11 - it has 3 corners.
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/read.at:104"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_26
#AT_START_27
at_fn_group_banner 27 'read.at:113' \
  "fail on a distorted arc-box" "                    " 5
at_xfail=no
(
  printf "%s\n" "27. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:115: fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 4 0 1 -1 -1 50 -1 -1 0.000 0 0 60 0 0 5
	 0 10200 1210 10200 1200 9225 0 9225 0 10200
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:115"
( $at_check_trace; fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 4 0 1 -1 -1 50 -1 -1 0.000 0 0 60 0 0 5
	 0 10200 1210 10200 1200 9225 0 9225 0 10200
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "A distorted or inclined rectangle with rounded corners at line 11.
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/read.at:115"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_27
#AT_START_28
at_fn_group_banner 28 'read.at:124' \
  "fail on a distorted arc-box" "                    " 5
at_xfail=no
(
  printf "%s\n" "28. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:126: fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 4 0 1 -1 -1 50 -1 -1 0.000 0 0 60 0 0 5
	 0 10200 1200 10210 1200 9225 0 9225 0 10200
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:126"
( $at_check_trace; fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 4 0 1 -1 -1 50 -1 -1 0.000 0 0 60 0 0 5
	 0 10200 1200 10210 1200 9225 0 9225 0 10200
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "A distorted or inclined rectangle with rounded corners at line 11.
" | \
  $at_diff - "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 1 $at_status "$at_srcdir/read.at:126"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_28
#AT_START_29
at_fn_group_banner 29 'read.at:135' \
  "remove arrow tips from single point" "            " 5
at_xfail=no
(
  printf "%s\n" "29. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:137: fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 1 0 1 -1 -1 50 -1 -1 0. 0 0 0 1 1 1
	0 0 2. 120. 240.
	0 0 2. 120. 240.
	0 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:137"
( $at_check_trace; fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 1 0 1 -1 -1 50 -1 -1 0. 0 0 0 1 1 1
	0 0 2. 120. 240.
	0 0 2. 120. 240.
	0 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "A single point with a forward arrow - remove the arrow.
A single point with a backward arrow - remove the arrow.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:137"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_29
#AT_START_30
at_fn_group_banner 30 'read.at:149' \
  "remove arrow tips on polygon with single point" " " 5
at_xfail=no
(
  printf "%s\n" "30. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:151: fig2dev -L svg <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 1 -1 -1 50 -1 -1 0. 0 0 0 0 1 1
	0 0 2. 120. 240.
	0 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:151"
( $at_check_trace; fig2dev -L svg <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 1 -1 -1 50 -1 -1 0. 0 0 0 0 1 1
	0 0 2. 120. 240.
	0 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "A polygon with 1 points at line 12 - convert to a polyline.
A single point with a backward arrow - remove the arrow.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:151"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_30
#AT_START_31
at_fn_group_banner 31 'read.at:162' \
  "reject huge arrow-type, ticket #57" "             " 5
at_xfail=no
(
  printf "%s\n" "31. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:164: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 1 0 1 -1 -1 50 -1 -1 0. 0 0 0 1 0 2
	10000000000000 0 1 60 120
0 0 600 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:164"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 1 0 1 -1 -1 50 -1 -1 0. 0 0 0 1 0 2
	10000000000000 0 1 60 120
0 0 600 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid forward arrow at line 11.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:164"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_31
#AT_START_32
at_fn_group_banner 32 'read.at:174' \
  "convert short polygon to polyline, ticket #56" "  " 5
at_xfail=no
(
  printf "%s\n" "32. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:176: fig2dev -L ptk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 1 -1 -1 50 -1 -1 0.0 0 0 -1 0 0 1
	0 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:176"
( $at_check_trace; fig2dev -L ptk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 1 -1 -1 50 -1 -1 0.0 0 0 -1 0 0 1
	0 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "A polygon with 1 points at line 11 - convert to a polyline.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:176"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_32
#AT_START_33
at_fn_group_banner 33 'read.at:185' \
  "reject negative font type" "                      " 5
at_xfail=no
(
  printf "%s\n" "33. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:187: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 1 0 -99999 12 0 4 135 360 0 0 A\\001
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:187"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 1 0 -99999 12 0 4 135 360 0 0 A\001
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid text object at line 10.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:187"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_33
#AT_START_34
at_fn_group_banner 34 'read.at:195' \
  "allow negative circle or ellipse radii" "         " 5
at_xfail=no
(
  printf "%s\n" "34. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:197: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
1 2 0 1 0 7 50 -1 -1 0.0 1 0.0 0 0 -1200 -600 -1200 600 1200 -600
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:197"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
1 2 0 1 0 7 50 -1 -1 0.0 1 0.0 0 0 -1200 -600 -1200 600 1200 -600
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:197"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_34
#AT_START_35
at_fn_group_banner 35 'read.at:204' \
  "reject huge arc radius, ticket #133" "            " 5
at_xfail=no
(
  printf "%s\n" "35. $at_setup_line: testing $at_desc ..."
  $at_traceon


# The tk output driver prints to a fixed string, floating point values,
# hence huge radii lead to buffer overflow.
{ set +x
printf "%s\n" "$at_srcdir/read.at:208: fig2dev -L tk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
5 1 0 15 0 7 50 0 -1 0.0 1 0 0 0 0.0 1e99 0 0 600 600 1200 1200
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:208"
( $at_check_trace; fig2dev -L tk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
5 1 0 15 0 7 50 0 -1 0.0 1 0 0 0 0.0 1e99 0 0 600 600 1200 1200
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid arc object at line 10.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:208"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_35
#AT_START_36
at_fn_group_banner 36 'read.at:216' \
  "survive debian bugs #881143, #881144" "           " 5
at_xfail=no
(
  printf "%s\n" "36. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:218: fig2dev -L pic <<EOF

22-222

4
0+4 71111111iNf7-3  3 3 0ítyn
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:218"
( $at_check_trace; fig2dev -L pic <<EOF

22-222

4
0+4 71111111iNf7-3  3 3 0ítyn
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid text object.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:218"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/read.at:227: fig2dev -L tikz <<EOF

 1  1

1

11 4-51

11 0 5
1
91
1
c!!!!
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:227"
( $at_check_trace; fig2dev -L tikz <<EOF

 1  1

1

11 4-51

11 0 5
1
91
1
c!!!!
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid text object.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:227"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_36
#AT_START_37
at_fn_group_banner 37 'read.at:245' \
  "reject out-of-range pattern, debian bug #881396" "" 5
at_xfail=no
(
  printf "%s\n" "37. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:247: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
3 0 0 0 0 0 0 0 123456789 0 0-0-0 00
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:247"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
3 0 0 0 0 0 0 0 123456789 0 0-0-0 00
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid spline object at line 10.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:247"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_37
#AT_START_38
at_fn_group_banner 38 'read.at:255' \
  "survive debian bug #890016" "                     " 5
at_xfail=no
(
  printf "%s\n" "38. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:257: fig2dev -L box <<EOF



0
1
16 3

16 6

0

16 6

0
1
1 6
1=6
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:257"
( $at_check_trace; fig2dev -L box <<EOF



0
1
16 3

16 6

0

16 6

0
1
1 6
1=6
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:257"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_38
#AT_START_39
at_fn_group_banner 39 'read.at:279' \
  "ignore too many comment lines, ticket #25" "      " 5
at_xfail=no
(
  printf "%s\n" "39. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:281: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.
Single
-2
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
1200 2
2 1 0 1 -1 -1 50 -1 -1 0.0 0 0 -1 0 0 2
        0 0 100 100
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:281"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.
Single
-2
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
1200 2
2 1 0 1 -1 -1 50 -1 -1 0.0 0 0 -1 0 0 2
        0 0 100 100
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/read.at:281"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_39
#AT_START_40
at_fn_group_banner 40 'read.at:299' \
  "correctly free invalid line object, ticket #26" " " 5
at_xfail=no
(
  printf "%s\n" "40. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:301: fig2dev -L box <<EOF

222213222
22222
2
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:301"
( $at_check_trace; fig2dev -L box <<EOF

222213222
22222
2
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:301"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_40
#AT_START_41
at_fn_group_banner 41 'read.at:310' \
  "correctly free invalid spline, ticket #27" "      " 5
at_xfail=no
(
  printf "%s\n" "41. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:312: fig2dev -L box <<EOF
#FIG 2
1200 2
3 0 0 0 0 0 0 0 0. 0 1
0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:312"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 2
1200 2
3 0 0 0 0 0 0 0 0. 0 1
0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Incomplete spline object at line 4.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:312"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_41
#AT_START_42
at_fn_group_banner 42 'read.at:322' \
  "allow last line without newline, ticket #28" "    " 5
at_xfail=no
(
  printf "%s\n" "42. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:324: printf %s '#FIG 2
0' | fig2dev -L box"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:324"
( $at_check_trace; printf %s '#FIG 2
0' | fig2dev -L box
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Incomplete resolution information at line 2.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:324"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_42
#AT_START_43
at_fn_group_banner 43 'read.at:330' \
  "correctly free invalid line object" "             " 5
at_xfail=no
(
  printf "%s\n" "43. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:332: fig2dev -L box <<EOF
#FIG 2
1200 2
2 1 1 1 -1 50 0 0 0. 0 0
0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:332"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 2
1200 2
2 1 1 1 -1 50 0 0 0. 0 0
0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Incomplete line object at line 4.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:332"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_43
#AT_START_44
at_fn_group_banner 44 'read.at:342' \
  "correctly free invalid line with picture" "       " 5
at_xfail=no
(
  printf "%s\n" "44. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:344: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 0 0 0. 0 0 0 0 0 5
0 img
0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:344"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 0 0 0. 0 0 0 0 0 5
0 img
0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Incomplete line object at line 12.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:344"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_44
#AT_START_45
at_fn_group_banner 45 'read.at:354' \
  "ignore splines with one point, ticket #29" "      " 5
at_xfail=no
(
  printf "%s\n" "45. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:356: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
3 2 0 0 0 0 50 0 0 0. 0 0 0 0
0 0 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:356"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
3 2 0 0 0 0 50 0 0 0. 0 0 0 0
0 0 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Incomplete spline object at line 11.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:356"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_45
#AT_START_46
at_fn_group_banner 46 'read.at:365' \
  "ignore splines with one point in format 1.3" "    " 5
at_xfail=no
(
  printf "%s\n" "46. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:367: fig2dev -L box <<EOF
1200 2 9 9
3 10 0 1 1 0 0 0 0 0 0
9999 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:367"
( $at_check_trace; fig2dev -L box <<EOF
1200 2 9 9
3 10 0 1 1 0 0 0 0 0 0
9999 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "spline with a single point
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:367"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_46
#AT_START_47
at_fn_group_banner 47 'read.at:376' \
  "ignore splines with one point in format 2, #129" "" 5
at_xfail=no
(
  printf "%s\n" "47. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:378: fig2dev -L box <<EOF
#FIG 2
1200 2
3 1 2 0 1 0 0 7 0 0 0
600 0 9999 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:378"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 2
1200 2
3 1 2 0 1 0 0 7 0 0 0
600 0 9999 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Incomplete spline object at line 4.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:378"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_47
#AT_START_48
at_fn_group_banner 48 'read.at:388' \
  "accept closed splines with three points" "        " 5
at_xfail=no
(
  printf "%s\n" "48. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:390: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
3 1 0 1 0 0 50 0 0 0. 0 0 0 3
0 0 600 0 0 600
1.0 1.0 1.0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:390"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
3 1 0 1 0 0 50 0 0 0. 0 0 0 3
0 0 600 0 0 600
1.0 1.0 1.0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:390"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_48
#AT_START_49
at_fn_group_banner 49 'read.at:399' \
  "set invalid color number to default, ticket #30" "" 5
at_xfail=no
(
  printf "%s\n" "49. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:401: fig2dev -L pict2e <<EOF
#FIG 2
1200 2
2 1 1 1 -502350 50 0 0 0. 0 0
0 0 100 100 9999 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:401"
( $at_check_trace; fig2dev -L pict2e <<EOF
#FIG 2
1200 2
2 1 1 1 -502350 50 0 0 0. 0 0
0 0 100 100 9999 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid color number -502350 at line 3, using default color.
" | \
  $at_diff - "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/read.at:401"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_49
#AT_START_50
at_fn_group_banner 50 'read.at:411' \
  "set ppi when reading fig files format 1.3" "      " 5
at_xfail=no
(
  printf "%s\n" "50. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:413: fig2dev -L dxf <<EOF
1200 2 9 9
3 10 0 1 1 0 0 0 0 0 0
100 100 200 0 9999 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:413"
( $at_check_trace; fig2dev -L dxf <<EOF
1200 2 9 9
3 10 0 1 1 0 0 0 0 0 0
100 100 200 0 9999 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:413"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_50
#AT_START_51
at_fn_group_banner 51 'read.at:421' \
  "process circle arrow at mag > 42, ticket #52" "   " 5
at_xfail=no
(
  printf "%s\n" "51. $at_setup_line: testing $at_desc ..."
  $at_traceon


# With the -fsanitize=address option, a magnification >= 42 triggers an error.
# Without the -fsanitize=address option, a segfault only results
# if the array is accessed far enough from its valid range;
# Use a magnification of 420.
{ set +x
printf "%s\n" "$at_srcdir/read.at:427: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
42000.0
Single
-2
1200 2
2 1 0 1 0 7 50 -1 -1 0.0 0 0 -1 1 0 2
	5 0 1.0 60.0 120.0
	 0 0 600 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:427"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
42000.0
Single
-2
1200 2
2 1 0 1 0 7 50 -1 -1 0.0 0 0 -1 1 0 2
	5 0 1.0 60.0 120.0
	 0 0 600 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:427"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_51
#AT_START_52
at_fn_group_banner 52 'read.at:444' \
  "allow text ending with multiple ^A, ticket #55" " " 5
at_xfail=no
(
  printf "%s\n" "52. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:446: fig2dev -L box <<EOF
#FIG 2
1200 2
4 2 0 0 1 0 0 0 6 110 376 639 5 Text
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:446"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 2
1200 2
4 2 0 0 1 0 0 0 6 110 376 639 5 Text
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:446"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_52
#AT_START_53
at_fn_group_banner 53 'read.at:454' \
  "reject too long papersize specification" "        " 5
at_xfail=no
(
  printf "%s\n" "53. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:456: fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Papersize_name_too_long
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:456"
( $at_check_trace; fig2dev -L box <<EOF
#FIG 3.2
Landscape
Center
Inches
Papersize_name_too_long
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid paper size specification at line 5: Papersize_name_too_long
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:456"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_53
#AT_START_54
at_fn_group_banner 54 'read.at:468' \
  "allow tex font -1, tickets #71, #75, #81" "       " 5
at_xfail=no
(
  printf "%s\n" "54. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >text.fig <<'_ATEOF'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 -1 -1 12 0.0 0 150 405 0 0 Text\001
_ATEOF

{ set +x
printf "%s\n" "$at_srcdir/read.at:473: fig2dev -L pict2e text.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:473"
( $at_check_trace; fig2dev -L pict2e text.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:473"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/read.at:475: fig2dev -L tikz text.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:475"
( $at_check_trace; fig2dev -L tikz text.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:475"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/read.at:477: fig2dev -L mp text.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:477"
( $at_check_trace; fig2dev -L mp text.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:477"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_54
#AT_START_55
at_fn_group_banner 55 'read.at:481' \
  "reject ASCII NUL ('\\0') in input, ticket #80" "   " 5
at_xfail=no
(
  printf "%s\n" "55. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:483: fig2dev -L svg \$srcdir/data/text_w_ascii0.fig"
at_fn_check_prepare_dynamic "fig2dev -L svg $srcdir/data/text_w_ascii0.fig" "read.at:483"
( $at_check_trace; fig2dev -L svg $srcdir/data/text_w_ascii0.fig
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "ASCII NUL ('\\0') in line 11.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:483"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_55
#AT_START_56
at_fn_group_banner 56 'read.at:488' \
  "reject out of range text angle, ticket #76" "     " 5
at_xfail=no
(
  printf "%s\n" "56. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:490: fig2dev -L pstricks <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 0 -1 12 9e26 0 150 405 0 0 Very slanted text\\001
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:490"
( $at_check_trace; fig2dev -L pstricks <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 0 -1 12 9e26 0 150 405 0 0 Very slanted text\001
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid text object at line 10.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:490"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_56
#AT_START_57
at_fn_group_banner 57 'read.at:498' \
  "reject out-of-range pattern fills, ticket #63" "  " 5
at_xfail=no
(
  printf "%s\n" "57. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:500: fig2dev -L cgm <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 0 0 7 50 -1 63 0.000 0 0 -1 0 0 4
	 0 0 1200 0 600 800 0 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:500"
( $at_check_trace; fig2dev -L cgm <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 0 0 7 50 -1 63 0.000 0 0 -1 0 0 4
	 0 0 1200 0 600 800 0 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid line object at line 10.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:500"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_57
#AT_START_58
at_fn_group_banner 58 'read.at:509' \
  "allow files end without eol, tickets #83, #84" "  " 5
at_xfail=no
(
  printf "%s\n" "58. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:511: printf %s \"#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 0 -1 12 0 0 150 405 0 0 No end-of-line here -->\" | \\
	fig2dev -L box"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:511"
( $at_check_trace; printf %s "#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 0 -1 12 0 0 150 405 0 0 No end-of-line here -->" | \
	fig2dev -L box
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:511"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/read.at:514: printf %s \"#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 0 -1 12 0 0 150 405 0 0 Start string
No end-of-line after one backslash --> \\\\\" | \\
	fig2dev -L box"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:514"
( $at_check_trace; printf %s "#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 0 -1 12 0 0 150 405 0 0 Start string
No end-of-line after one backslash --> \\" | \
	fig2dev -L box
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:514"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_58
#AT_START_59
at_fn_group_banner 59 'read.at:520' \
  "do not reach beyond buffer, ticket #85" "         " 5
at_xfail=no
(
  printf "%s\n" "59. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:522: printf %s \"#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 0 -1 12 0 0 150 405 0 0 500chars -and then - no end-of-line HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\" \\
	| fig2dev -L box"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:522"
( $at_check_trace; printf %s "#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 0 -1 12 0 0 150 405 0 0 500chars -and then - no end-of-line HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" \
	| fig2dev -L box
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:522"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_59
#AT_START_60
at_fn_group_banner 60 'read.at:527' \
  "reject negative font size, ticket #86" "          " 5
at_xfail=no
(
  printf "%s\n" "60. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:529: printf \"%s\\n\" \"2 4 7 0 4 0 -116 0 4 9 3585 6974 3 2\" | fig2dev -L epic
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:529"
( $at_check_trace; printf "%s\n" "2 4 7 0 4 0 -116 0 4 9 3585 6974 3 2" | fig2dev -L epic

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Invalid text object.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:529"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_60
#AT_START_61
at_fn_group_banner 61 'read.at:534' \
  "reject huge spline controls values, #65, #127" "  " 5
at_xfail=no
(
  printf "%s\n" "61. $at_setup_line: testing $at_desc ..."
  $at_traceon


# Use an output language that does not natively support Bezier splines.
# Otherwise, the huge values are simply copied to the output.
{ set +x
printf "%s\n" "$at_srcdir/read.at:538: fig2dev -L epic <<EOF
#FIG 3.1
Landscape
Center
Metric
1200 2
3 2 0 1 0 7 50 -1 -1 0.0 0 0 0 2
	 0 0 1200 0
	 600 600 600 9e999
	 600 600 600 600
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:538"
( $at_check_trace; fig2dev -L epic <<EOF
#FIG 3.1
Landscape
Center
Metric
1200 2
3 2 0 1 0 7 50 -1 -1 0.0 0 0 0 2
	 0 0 1200 0
	 600 600 600 9e999
	 600 600 600 600
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Spline control points out of range at line 8.
" | \
  $at_diff - "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 1 $at_status "$at_srcdir/read.at:538"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_61
#AT_START_62
at_fn_group_banner 62 'read.at:555' \
  "prepend fig file path to picture file name" "     " 6
at_xfail=no
(
  printf "%s\n" "62. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/read.at:557: fig2dev -L eps \$srcdir/data/boxwimg.fig | \\
	\$FGREP \"% Begin Imported EPS File: \$srcdir/data/line.eps\"
"
at_fn_check_prepare_notrace 'an embedded newline' "read.at:557"
( $at_check_trace; fig2dev -L eps $srcdir/data/boxwimg.fig | \
	$FGREP "% Begin Imported EPS File: $srcdir/data/line.eps"

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/read.at:557"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_62
#AT_START_63
at_fn_group_banner 63 'output.at:24' \
  "Write complete output file in page mode (-P)" "   " 7
at_xfail=no
(
  printf "%s\n" "63. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:26: fig2dev -Lepic -P \$srcdir/data/line.fig line.tex"
at_fn_check_prepare_dynamic "fig2dev -Lepic -P $srcdir/data/line.fig line.tex" "output.at:26"
( $at_check_trace; fig2dev -Lepic -P $srcdir/data/line.fig line.tex
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/output.at:26"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_63
#AT_START_64
at_fn_group_banner 64 'output.at:31' \
  "allow polygons with four points" "                " 8
at_xfail=no
(
  printf "%s\n" "64. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:33: fig2dev -L gbx <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 1 0 7 50 0 -1 0 1 0 0 0 0 4
	0 0 0 600 600 600 0 0
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:33"
( $at_check_trace; fig2dev -L gbx <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 3 0 1 0 7 50 0 -1 0 1 0 0 0 0 4
	0 0 0 600 600 600 0 0
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:33"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_64
#AT_START_65
at_fn_group_banner 65 'output.at:43' \
  "compare arrow tips with template" "               " 9
at_xfail=no
(
  printf "%s\n" "65. $at_setup_line: testing $at_desc ..."
  $at_traceon


# Skip this test, if the necessary programs are not found
printf "%s\n" "output.at:47" >"$at_check_line_file"
(! $GSEXE --version || ! pnmarith -version || ! ppmhist -version) \
  && at_fn_check_skip 77 "$at_srcdir/output.at:47"

# The original must be saved as eps, not converted to pdf.
# Conversion to pdf introduces a few pixel errors.
$GSEXE -sDEVICE=pgmraw -dEPSCrop -r1200 -dNOPAUSE -dBATCH -dQUIET \
	-sOutputFile=a.pgm $srcdir/data/arrows.eps

fig2dev -L eps $srcdir/data/arrows.fig | \
	$GSEXE -sDEVICE=pgmraw -dEPSCrop -r1200 -dNOPAUSE -dBATCH -dQUIET \
	   -sOutputFile=b.pgm -

# Was pamsumm -sum -brief, to expect 0\n on stdout - but pamsumm does not
# exist on Debian stretch, so use ppmhist -noheader
{ set +x
printf "%s\n" "$at_srcdir/output.at:60: pnmarith -difference a.pgm b.pgm | ppmhist -noheader | tr -d ' \\t'"
at_fn_check_prepare_notrace 'a shell pipeline' "output.at:60"
( $at_check_trace; pnmarith -difference a.pgm b.pgm | ppmhist -noheader | tr -d ' \t'
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; printf "%s\n" "000026673361
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/output.at:60"
if $at_failed
then :
  pnmarith -difference a.pgm b.pgm >diff.pgm
mv a.pgm orig.pgm; mv b.pgm current.pgm
fi
$at_failed && at_fn_log_failure
$at_traceon; }




  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_65
#AT_START_66
at_fn_group_banner 66 'output.at:69' \
  "do not clip 0-width objects having arrows, #53" " " 9
at_xfail=no
(
  printf "%s\n" "66. $at_setup_line: testing $at_desc ..."
  $at_traceon


# The lines of objects which have a line thickness of zero and which
# have arrow heads do not need to be clipped.
printf "%s\n" "output.at:73" >"$at_check_line_file"
(! $GSEXE --version || ! pnmarith -version || ! ppmhist -version) \
  && at_fn_check_skip 77 "$at_srcdir/output.at:73"
cat >clip0.fig <<'_ATEOF'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 0 0 7 60 -1 20 0.000 0 0 -1 0 0 5
	 0 -300 0 300 450 300 450 -300 0 -300
2 1 0 0 0 0 50 -1 20 0.000 0 0 -1 1 1 4
	0 0 1.00 60.00 120.00
	0 0 1.00 60.00 120.00
	 0 0 0 -300 150 -300 150 0
2 1 0 0 0 0 50 -1 20 0.000 0 0 -1 1 1 4
	13 0 1.00 60.00 120.00
	13 0 1.00 60.00 120.00
	 150 0 150 -300 300 -300 300 0
2 1 0 0 0 0 50 -1 20 0.000 0 0 -1 1 1 4
	13 1 1.0 60.0 120.0
	13 1 1.0 60.0 120.0
	 300 0 300 -300 450 -300 450 0
2 1 0 0 0 0 50 -1 20 0.0 0 0 -1 1 1 4
	14 0 1.0 60.00 120.00
	14 0 1.0 60.00 120.00
	 0 300 0 0 150 0 150 300
2 1 0 0 0 0 50 -1 20 0.0 0 0 -1 1 1 4
	14 1 1.00 60.00 120.00
	14 1 1.00 60.00 120.00
	 150 300 150 0 300 0 300 300
2 2 0 0 0 0 50 -1 20 0.0 0 0 -1 0 0 5
	 300 0 300 300 450 300 450 0 300 0
_ATEOF

{ set +x
printf "%s\n" "$at_srcdir/output.at:107: fig2dev -L eps -B '0.325 0.45 0.025 0.025' clip0.fig | \\
	\$GSEXE -sDEVICE=pbmraw -dEPSCrop -r80 -dNOPAUSE -dBATCH -dQUIET \\
	-sOutputFile=- - | ppmhist -noheader | tr -d ' \\t'"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:107"
( $at_check_trace; fig2dev -L eps -B '0.325 0.45 0.025 0.025' clip0.fig | \
	$GSEXE -sDEVICE=pbmraw -dEPSCrop -r80 -dNOPAUSE -dBATCH -dQUIET \
	-sOutputFile=- - | ppmhist -noheader | tr -d ' \t'
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "00001064
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/output.at:107"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_66
#AT_START_67
at_fn_group_banner 67 'output.at:113' \
  "honor SOURCE_DATE_EPOCH environment variable" "   " 9
at_xfail=no
(
  printf "%s\n" "67. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:115: SOURCE_DATE_EPOCH=123456789 fig2dev -L eps \$srcdir/data/line.fig | \\
	\$FGREP 'CreationDate'"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:115"
( $at_check_trace; SOURCE_DATE_EPOCH=123456789 fig2dev -L eps $srcdir/data/line.fig | \
	$FGREP 'CreationDate'
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo >>"$at_stdout"; printf "%s\n" "%%CreationDate: 1973-11-29 21:33:09
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/output.at:115"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_67
#AT_START_68
at_fn_group_banner 68 'output.at:120' \
  "fail on text in SOURCE_DATE_EPOCH" "              " 9
at_xfail=no
(
  printf "%s\n" "68. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:122: SOURCE_DATE_EPOCH=7here fig2dev -L eps \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:122"
( $at_check_trace; SOURCE_DATE_EPOCH=7here fig2dev -L eps $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo >>"$at_stderr"; printf "%s\n" "Environment variable \$SOURCE_DATE_EPOCH: Trailing garbage: here
" | \
  $at_diff - "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/output.at:122"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_68
#AT_START_69
at_fn_group_banner 69 'output.at:170' \
  "ignore -G option" "                               " 10
at_xfail=no
(
  printf "%s\n" "69. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >default.fig <<'_ATEOF'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 1 0 2 -1 7 50 -1 -1 0.000 0 0 -1 0 0 2
	 0 10200 1200 10200
_ATEOF

{ set +x
printf "%s\n" "$at_srcdir/output.at:176: fig2dev -L pict2e -G0.2:1cm default.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:176"
( $at_check_trace; fig2dev -L pict2e -G0.2:1cm default.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:

at_fn_check_status 0 $at_status "$at_srcdir/output.at:176"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_69
#AT_START_70
at_fn_group_banner 70 'output.at:180' \
  "accept large coordinates" "                       " 10
at_xfail=no
(
  printf "%s\n" "70. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "output.at:182" >"$at_check_line_file"
(! latex --version) \
  && at_fn_check_skip 77 "$at_srcdir/output.at:182"
cat >big1.fig <<'_ATEOF'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 1 0 8 0 7 50 -1 -1 0.0 0 0 -1 0 0 2
-18000 0 0 -18000
_ATEOF

cat >big2.fig <<'_ATEOF'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 1 0 8 0 7 50 -1 -1 0.0 0 0 -1 0 0 2
0 18000 18000 0
_ATEOF

{ set +x
printf "%s\n" "$at_srcdir/output.at:191: fig2dev -L pict2e -P big1.fig big1.tex && \\
	fig2dev -L pict2e -P big2.fig big2.tex && \\
	latex -halt-on-error big1.tex && latex -halt-on-error big2.tex
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:191"
( $at_check_trace; fig2dev -L pict2e -P big1.fig big1.tex && \
	fig2dev -L pict2e -P big2.fig big2.tex && \
	latex -halt-on-error big1.tex && latex -halt-on-error big2.tex

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:191"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_70
#AT_START_71
at_fn_group_banner 71 'output.at:197' \
  "accept arc arrows with zero height, ticket #74" " " 10
at_xfail=no
(
  printf "%s\n" "71. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:199: fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
5 1 0 1 0 7 50 -1 -1 0.0 0 0 1 0 0.0 0.0 600 0 0 600 -600 0
	1 1 1.0 60.0 0.0
EOF"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:199"
( $at_check_trace; fig2dev -L pict2e <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
5 1 0 1 0 7 50 -1 -1 0.0 0 0 1 0 0.0 0.0 600 0 0 600 -600 0
	1 1 1.0 60.0 0.0
EOF
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:199"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_71
#AT_START_72
at_fn_group_banner 72 'output.at:208' \
  "compare patterns with template" "                 " 11
at_xfail=no
(
  printf "%s\n" "72. $at_setup_line: testing $at_desc ..."
  $at_traceon



{ set +x
printf "%s\n" "$at_srcdir/output.at:214: SOURCE_DATE_EPOCH=1483528980 fig2dev -L svg \\
	\$srcdir/data/patterns.fig | \\
	diff -I '^<!-- Creator: fig2dev Version .* -->\$' \\
		- \$builddir/data/patterns.svg"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:214"
( $at_check_trace; SOURCE_DATE_EPOCH=1483528980 fig2dev -L svg \
	$srcdir/data/patterns.fig | \
	diff -I '^<!-- Creator: fig2dev Version .* -->$' \
		- $builddir/data/patterns.svg
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/output.at:214"
$at_failed && at_fn_log_failure
$at_traceon; }

# Bitwise comparison failed because of the unreliable rendering provided
# by, e.g., convert. Commented out.
  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_72
#AT_START_73
at_fn_group_banner 73 'output.at:246' \
  "compare fills with arrows to template" "          " 11
at_xfail=no
(
  printf "%s\n" "73. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:248: SOURCE_DATE_EPOCH=1483564881 fig2dev -L svg \\
	\$srcdir/data/fillswclip.fig | \\
	diff -I '^<!-- Creator: fig2dev Version .* -->\$' \\
		- \$builddir/data/fillswclip.svg"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:248"
( $at_check_trace; SOURCE_DATE_EPOCH=1483564881 fig2dev -L svg \
	$srcdir/data/fillswclip.fig | \
	diff -I '^<!-- Creator: fig2dev Version .* -->$' \
		- $builddir/data/fillswclip.svg
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/output.at:248"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_73
#AT_START_74
at_fn_group_banner 74 'output.at:254' \
  "truncated sub/superscript, tickets #113, #117" "  " 11
at_xfail=no
(
  printf "%s\n" "74. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:256: fig2dev -L svg <<EOF
#FIG 2
1200 2
4 2 0 0 1 0 0 0 6 110 376 0 0 ^
4 2 0 0 1 0 0 0 6 110 376 0 200 ^{
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:256"
( $at_check_trace; fig2dev -L svg <<EOF
#FIG 2
1200 2
4 2 0 0 1 0 0 0 6 110 376 0 0 ^
4 2 0 0 1 0 0 0 6 110 376 0 200 ^{
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:256"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_74
#AT_START_75
at_fn_group_banner 75 'output.at:265' \
  "omit arrows without points, ticket #115" "        " 11
at_xfail=no
(
  printf "%s\n" "75. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:267: fig2dev -L svg <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
5 1 0 1 7 7 44 -1 6 0.000 0 1 1 1 50 -1 -1500 200 -1 7 50 -1  900 750 975
	0 0 1.00 45.00 90.00
	5 0 1.003 1426 1068 1426
EOF"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:267"
( $at_check_trace; fig2dev -L svg <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
5 1 0 1 7 7 44 -1 6 0.000 0 1 1 1 50 -1 -1500 200 -1 7 50 -1  900 750 975
	0 0 1.00 45.00 90.00
	5 0 1.003 1426 1068 1426
EOF
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:267"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_75
#AT_START_76
at_fn_group_banner 76 'output.at:278' \
  "conditionally allocate \\XFigu" "                  " 12
at_xfail=no
(
  printf "%s\n" "76. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "output.at:280" >"$at_check_line_file"
(! latex --version) \
  && at_fn_check_skip 77 "$at_srcdir/output.at:280"
cat >latex.tex <<'_ATEOF'
\documentclass{minimal}\usepackage{tikz}\begin{document}
\input line.tikz\immediate\write16{\meaning\XFigu}
\input line.tikz\immediate\write16{\meaning\XFigu}\end{document}
_ATEOF

fig2dev -L tikz $srcdir/data/line.fig line.tikz
{ set +x
printf "%s\n" "$at_srcdir/output.at:287: latex latex.tex | \$FGREP dimen | uniq | wc -l | tr -d ' \\t'
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:287"
( $at_check_trace; latex latex.tex | $FGREP dimen | uniq | wc -l | tr -d ' \t'

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter

echo >>"$at_stdout"; printf "%s\n" "1
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/output.at:287"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_76
#AT_START_77
at_fn_group_banner 77 'output.at:292' \
  "pattern with stroke color equal to fill color" "  " 12
at_xfail=no
(
  printf "%s\n" "77. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >box.fig <<'_ATEOF'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 2 0 0 1 1 50 -1 49 0.0 0 0 -1 0 0 4
	 0 0 600 0 600 600 0 600
_ATEOF

{ set +x
printf "%s\n" "$at_srcdir/output.at:299: fig2dev -L tikz -P box.fig | \$FGREP '\\pgfsetfillpattern{xfigp8}{blue}
\\pattern'
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:299"
( $at_check_trace; fig2dev -L tikz -P box.fig | $FGREP '\pgfsetfillpattern{xfigp8}{blue}
\pattern'

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:299"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_77
#AT_START_78
at_fn_group_banner 78 'output.at:304' \
  "accept large coordinates" "                       " 12
at_xfail=no
(
  printf "%s\n" "78. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "output.at:306" >"$at_check_line_file"
(! latex --version) \
  && at_fn_check_skip 77 "$at_srcdir/output.at:306"
cat >big1.fig <<'_ATEOF'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 1 0 8 0 7 50 -1 -1 0.0 0 0 -1 0 0 2
-18000 0 0 -18000
_ATEOF

cat >big2.fig <<'_ATEOF'
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 1 0 8 0 7 50 -1 -1 0.0 0 0 -1 0 0 2
0 18000 18000 0
_ATEOF

{ set +x
printf "%s\n" "$at_srcdir/output.at:315: fig2dev -L tikz -P big1.fig big1.tex && \\
	fig2dev -L tikz -P big2.fig big2.tex && \\
	latex -halt-on-error big1.tex && latex -halt-on-error big2.tex
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:315"
( $at_check_trace; fig2dev -L tikz -P big1.fig big1.tex && \
	fig2dev -L tikz -P big2.fig big2.tex && \
	latex -halt-on-error big1.tex && latex -halt-on-error big2.tex

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:315"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_78
#AT_START_79
at_fn_group_banner 79 'output.at:324' \
  "Respect -F option for bitmap outputs" "           " 13
at_xfail=no
(
  printf "%s\n" "79. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "output.at:326" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/output.at:326"
{ set +x
printf "%s\n" "$at_srcdir/output.at:327: fig2dev -F - textbox.ppm <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 -1 16 32 0.0000 6 511 7993 0 0 Some own ways ongoing in cases\\001
2 2 0 1 0 7 50 -1 -1 0.000 0 0 -1 0 0 5
	 0 0 8025 0 8025 -300 0 -300 0 0
EOF"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:327"
( $at_check_trace; fig2dev -F - textbox.ppm <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 50 -1 16 32 0.0000 6 511 7993 0 0 Some own ways ongoing in cases\001
2 2 0 1 0 7 50 -1 -1 0.000 0 0 -1 0 0 5
	 0 0 8025 0 8025 -300 0 -300 0 0
EOF
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/output.at:327"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_79
#AT_START_80
at_fn_group_banner 80 'output.at:335' \
  "allow default color in ge, cgm output, #72, #73" "" 13
at_xfail=no
(
  printf "%s\n" "80. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:337: fig2dev -L cgm \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:337"
( $at_check_trace; fig2dev -L cgm $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:337"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
printf "%s\n" "$at_srcdir/output.at:339: fig2dev -L ge \$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:339"
( $at_check_trace; fig2dev -L ge $srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:339"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_80
#AT_START_81
at_fn_group_banner 81 'output.at:343' \
  "tk output: allow arbitrarily long text, #134" "   " 13
at_xfail=no
(
  printf "%s\n" "81. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:345: fig2dev -L tk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 1 0 1 12 0 4 135 36000 0 0  this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters\\001
EOF"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:345"
( $at_check_trace; fig2dev -L tk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 1 0 1 12 0 4 135 36000 0 0  this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters\001
EOF
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:345"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_81
#AT_START_82
at_fn_group_banner 82 'output.at:353' \
  "ptk output: allow arbitrarily long text, #134" "  " 13
at_xfail=no
(
  printf "%s\n" "82. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/output.at:355: fig2dev -L ptk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 1 0 1 12 0 4 135 36000 0 0  this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters\\001
EOF"
at_fn_check_prepare_notrace 'an embedded newline' "output.at:355"
( $at_check_trace; fig2dev -L ptk <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
4 0 0 1 0 1 12 0 4 135 36000 0 0  this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters this is a long text string exceeding 2048 characters\001
EOF
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/output.at:355"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_82
#AT_START_83
at_fn_group_banner 83 'bitmaps.at:25' \
  "gif" "                                            " 14
at_xfail=no
(
  printf "%s\n" "83. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:27" >"$at_check_line_file"
(! $GSEXE --version || ! giftopnm -version || ! ppmtopcx -version || \
	( ! ppmtogif -version && ! convert -version &&  ! gm version)) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:27"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:29: fig2dev -L gif \$srcdir/data/line.fig line.gif && \\
	\$SED '11 s/eps/gif/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:29"
( $at_check_trace; fig2dev -L gif $srcdir/data/line.fig line.gif && \
	$SED '11 s/eps/gif/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:29"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_83
#AT_START_84
at_fn_group_banner 84 'bitmaps.at:34' \
  "jpeg" "                                           " 14
at_xfail=no
(
  printf "%s\n" "84. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:36" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:36"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:37: fig2dev -L jpeg \$srcdir/data/line.fig line.jpg && \\
	\$SED '11 s/eps/jpg/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:37"
( $at_check_trace; fig2dev -L jpeg $srcdir/data/line.fig line.jpg && \
	$SED '11 s/eps/jpg/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_84
#AT_START_85
at_fn_group_banner 85 'bitmaps.at:42' \
  "pcx" "                                            " 14
at_xfail=no
(
  printf "%s\n" "85. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:44" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:44"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:45: fig2dev -L pcx \$srcdir/data/line.fig line.pcx && \\
	\$SED '11 s/eps/pcx/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:45"
( $at_check_trace; fig2dev -L pcx $srcdir/data/line.fig line.pcx && \
	$SED '11 s/eps/pcx/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:45"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_85
#AT_START_86
at_fn_group_banner 86 'bitmaps.at:50' \
  "png" "                                            " 14
at_xfail=no
(
  printf "%s\n" "86. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:52" >"$at_check_line_file"
(test -n "$WITH_PNG_TRUE" || ! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:52"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:53: fig2dev -L png \$srcdir/data/line.fig line.png && \\
	\$SED '11 s/eps/png/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:53"
( $at_check_trace; fig2dev -L png $srcdir/data/line.fig line.png && \
	$SED '11 s/eps/png/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:53"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_86
#AT_START_87
at_fn_group_banner 87 'bitmaps.at:58' \
  "png with smoothing" "                             " 14
at_xfail=no
(
  printf "%s\n" "87. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:60" >"$at_check_line_file"
(test -n "$WITH_PNG_TRUE" || ! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:60"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:61: fig2dev -L png -S 4 \$srcdir/data/line.fig line.png && \\
	\$SED '11 s/eps/png/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:61"
( $at_check_trace; fig2dev -L png -S 4 $srcdir/data/line.fig line.png && \
	$SED '11 s/eps/png/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:61"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_87
#AT_START_88
at_fn_group_banner 88 'bitmaps.at:66' \
  "ppm" "                                            " 14
at_xfail=no
(
  printf "%s\n" "88. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:68" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:68"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:69: fig2dev -L ppm \$srcdir/data/line.fig line.ppm && \\
	\$SED '11 s/eps/ppm/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:69"
( $at_check_trace; fig2dev -L ppm $srcdir/data/line.fig line.ppm && \
	$SED '11 s/eps/ppm/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:69"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_88
#AT_START_89
at_fn_group_banner 89 'bitmaps.at:74' \
  "tiff" "                                           " 14
at_xfail=no
(
  printf "%s\n" "89. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:76" >"$at_check_line_file"
(! $GSEXE --version || ((! tifftopnm -version || ! ppmtopcx -version) &&
				! convert -version &&  ! gm version)) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:76"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:78: fig2dev -L tiff \$srcdir/data/line.fig line.tif && \\
	\$SED '11 s/eps/tif/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:78"
( $at_check_trace; fig2dev -L tiff $srcdir/data/line.fig line.tif && \
	$SED '11 s/eps/tif/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:78"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_89
#AT_START_90
at_fn_group_banner 90 'bitmaps.at:83' \
  "xbm" "                                            " 14
at_xfail=no
(
  printf "%s\n" "90. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:85" >"$at_check_line_file"
(! $GSEXE --version || \
	( ! pbmtoxbm -version && ! convert -version && ! gm version)) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:85"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:87: fig2dev -L xbm \$srcdir/data/line.fig line.xbm && \\
	\$SED '11 s/eps/xbm/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:87"
( $at_check_trace; fig2dev -L xbm $srcdir/data/line.fig line.xbm && \
	$SED '11 s/eps/xbm/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:87"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_90
#AT_START_91
at_fn_group_banner 91 'bitmaps.at:92' \
  "xbm with smoothing" "                             " 14
at_xfail=no
(
  printf "%s\n" "91. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:94" >"$at_check_line_file"
(! $GSEXE --version || \
	( ! pbmtoxbm -version && ! convert -version && ! gm version)) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:94"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:96: fig2dev -L xbm -S 4 \$srcdir/data/line.fig line.xbm && \\
	\$SED '11 s/eps/xbm/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:96"
( $at_check_trace; fig2dev -L xbm -S 4 $srcdir/data/line.fig line.xbm && \
	$SED '11 s/eps/xbm/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:96"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_91
#AT_START_92
at_fn_group_banner 92 'bitmaps.at:101' \
  "xpm" "                                            " 14
at_xfail=no
(
  printf "%s\n" "92. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:103" >"$at_check_line_file"
(! $GSEXE --version || \
	( ! pbmtoxbm -version && ! convert -version && ! gm version)) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:103"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:105: fig2dev -L xpm \$srcdir/data/line.fig line.xpm && \\
	\$SED '11 s/eps/xpm/' \$srcdir/data/boxwimg.fig | fig2dev -L eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:105"
( $at_check_trace; fig2dev -L xpm $srcdir/data/line.fig line.xpm && \
	$SED '11 s/eps/xpm/' $srcdir/data/boxwimg.fig | fig2dev -L eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:105"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_92
#AT_START_93
at_fn_group_banner 93 'bitmaps.at:114' \
  "eps with acscii preview" "                        " 15
at_xfail=no
(
  printf "%s\n" "93. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:116" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:116"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:117: fig2dev -L eps -A \$srcdir/data/line.fig | \\
	\$FGREP %%BeginPreview
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:117"
( $at_check_trace; fig2dev -L eps -A $srcdir/data/line.fig | \
	$FGREP %%BeginPreview

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:117"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_93
#AT_START_94
at_fn_group_banner 94 'bitmaps.at:122' \
  "eps with tiff preview" "                          " 15
at_xfail=no
(
  printf "%s\n" "94. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:124" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:124"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:125: fig2dev -L eps -T \$srcdir/data/line.fig line-tiff.eps
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:125"
( $at_check_trace; fig2dev -L eps -T $srcdir/data/line.fig line-tiff.eps

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:125"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_94
#AT_START_95
at_fn_group_banner 95 'bitmaps.at:129' \
  "eps with tiff preview, use \"-\" for stdin" "       " 15
at_xfail=no
(
  printf "%s\n" "95. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:131" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:131"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:132: fig2dev -Leps -T - out.eps <\$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:132"
( $at_check_trace; fig2dev -Leps -T - out.eps <$srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:132"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_95
#AT_START_96
at_fn_group_banner 96 'bitmaps.at:136' \
  "create ppm, use \"-\" for stdin" "                  " 15
at_xfail=no
(
  printf "%s\n" "96. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:138" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:138"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:139: fig2dev -Lppm - out.ppm <\$srcdir/data/line.fig
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:139"
( $at_check_trace; fig2dev -Lppm - out.ppm <$srcdir/data/line.fig

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:139"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_96
#AT_START_97
at_fn_group_banner 97 'bitmaps.at:145' \
  "epsi" "                                           " 16
at_xfail=no
(
  printf "%s\n" "97. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:147" >"$at_check_line_file"
(! $GSEXE --version || ! ppmhist -version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:147"
fig2dev -L eps -T $srcdir/data/line.fig line-epsi.eps
blackpixels=`$SED '11 s/line/line-epsi/' $srcdir/data/boxwimg.fig | \
	fig2dev -L ppm | ppmhist -noheader | $SED -n '2p' | tr -d ' 	'`
# $blackpixels are 220 on archlinux with ghostscript 9.20,
#		219 on ubuntu 16.04.2 with ghostscript 9.18
#		263 on archlinux with ghostscript 9.22
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:154: test \$blackpixels -gt 218 && test \$blackpixels -lt 264"
at_fn_check_prepare_dynamic "test $blackpixels -gt 218 && test $blackpixels -lt 264" "bitmaps.at:154"
( $at_check_trace; test $blackpixels -gt 218 && test $blackpixels -lt 264
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:154"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_97
#AT_START_98
at_fn_group_banner 98 'bitmaps.at:157' \
  "postscript, created by fig2dev" "                 " 16
at_xfail=no
(
  printf "%s\n" "98. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:159" >"$at_check_line_file"
(! $GSEXE --version || ! ppmhist -version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:159"
cat >fig2dev.ps <<'_ATEOF'
%!PS-Adobe-3.0
%%Orientation: Portrait
%%Pages: 1
%%BoundingBox: 0 0 420 595
%%DocumentPaperSizes: A5
%%EndComments
%%BeginSetup
[{
%%BeginFeature: *PageRegion A5
<</PageSize [420 595]>> setpagedevice
%%EndFeature
} stopped cleartomark
%%EndSetup
%%BeginProlog
/m {moveto} bind def
/s {show} bind def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
%%EndPageSetup
/Helvetica findfont 12 scalefont setfont
24 559 m (Upper left) s
336 559 m (Upper right) s
24 24 m (Lower left) s
336 24 m (Lower right) s
170 340 m (Postscript Test) s
showpage
%%Trailer
%EOF
_ATEOF


blackpixels=`fig2dev -L ppm <<EOF | ppmhist -noheader | $SED -n '2p' | \
	tr -d '	 '
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 -1 -1 0.000 0 0 -1 0 0 5
	0 fig2dev.ps
	 0 0 7000 0 7000 9917 0 9917 0 0
4 0 0 50 -1 16 12 4.7124 4 210 2100 7225 1575 Included postscript file\001
EOF`
# $blackpixels are 1236 on archlinux wiht ghostscript 9.20,
#		1198 on ubuntu 16.04.2 with ghostscript 9.18
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:201: test \$blackpixels -gt 1197 && test \$blackpixels -lt 1240"
at_fn_check_prepare_dynamic "test $blackpixels -gt 1197 && test $blackpixels -lt 1240" "bitmaps.at:201"
( $at_check_trace; test $blackpixels -gt 1197 && test $blackpixels -lt 1240
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:201"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_98
#AT_START_99
at_fn_group_banner 99 'bitmaps.at:204' \
  "postscript, created by latex" "                   " 16
at_xfail=no
(
  printf "%s\n" "99. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:206" >"$at_check_line_file"
(! $GSEXE --version || ! ppmhist -version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:206"
cat >latex.ps <<'_ATEOF'
%!PS-Adobe-2.0
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 420 596
%%DocumentFonts: Helvetica
%%DocumentPaperSizes: a5
%%EndComments
%%BeginProlog
/m {moveto} bind def
/s {show} bind def
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
%%BeginPaperSize: a5
/setpagedevice where
{ pop << /PageSize [420 595] >> setpagedevice }
{ /a5 where { pop a5 } if }
ifelse
%%EndPaperSize
%%EndSetup
%%Page: 1 1
/Helvetica findfont 12 scalefont setfont
24 559 m (Upper left) s
336 559 m (Upper right) s
24 24 m (Lower left) s
336 24 m (Lower right) s
126 340 m (Postscript as created by LaTeX) s
%%Trailer
userdict /end-hook known{end-hook}if
%%EOF
_ATEOF


blackpixels=`fig2dev -L ppm <<EOF | ppmhist -noheader | $SED -n '2p' | \
tr -d '\t '
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 -1 -1 0.000 0 0 -1 0 0 5
	0 latex.ps
	 0 0 7000 0 7000 9917 0 9917 0 0
4 0 0 50 -1 16 12 4.7124 4 210 2100 7225 1575 Included postscript file\001
EOF`
# $blackpixels are 1488 on archlinux with ghostscript 9.20,
#		1433 on ubuntu 16.04.2 with ghostscript 9.18
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:249: test \$blackpixels -gt 1431 && test \$blackpixels -lt 1494"
at_fn_check_prepare_dynamic "test $blackpixels -gt 1431 && test $blackpixels -lt 1494" "bitmaps.at:249"
( $at_check_trace; test $blackpixels -gt 1431 && test $blackpixels -lt 1494
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:249"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_99
#AT_START_100
at_fn_group_banner 100 'bitmaps.at:252' \
  "find /MediaBox in pdf file" "                     " 16
at_xfail=no
(
  printf "%s\n" "100. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:254: \"\$abs_builddir\"/test2 \"\$srcdir/data/cross.pdf\""
at_fn_check_prepare_dynamic "\"$abs_builddir\"/test2 \"$srcdir/data/cross.pdf\"" "bitmaps.at:254"
( $at_check_trace; "$abs_builddir"/test2 "$srcdir/data/cross.pdf"
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:254"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_100
#AT_START_101
at_fn_group_banner 101 'bitmaps.at:257' \
  "pdf" "                                            " 16
at_xfail=no
(
  printf "%s\n" "101. $at_setup_line: testing $at_desc ..."
  $at_traceon


printf "%s\n" "bitmaps.at:259" >"$at_check_line_file"
(! $GSEXE --version) \
  && at_fn_check_skip 77 "$at_srcdir/bitmaps.at:259"
{ set +x
printf "%s\n" "$at_srcdir/bitmaps.at:260: fig2dev -L pdf <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 -1 -1 0.000 0 0 -1 0 0 5
	0 \$srcdir/data/cross.pdf
	 75 75 585 75 585 285 75 285 75 75
EOF
"
at_fn_check_prepare_notrace 'an embedded newline' "bitmaps.at:260"
( $at_check_trace; fig2dev -L pdf <<EOF
#FIG 3.2
Landscape
Center
Inches
Letter
100.00
Single
-2
1200 2
2 5 0 1 0 -1 50 -1 -1 0.000 0 0 -1 0 0 5
	0 $srcdir/data/cross.pdf
	 75 75 585 75 585 285 75 285 75 75
EOF

) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bitmaps.at:260"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_101
