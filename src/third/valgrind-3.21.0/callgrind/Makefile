# Makefile.in generated by automake 1.16.5 from Makefile.am.
# callgrind/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# This file should be included (directly or indirectly) by every
# Makefile.am that builds programs.  And also the top-level Makefile.am.

#----------------------------------------------------------------------------
# Global stuff
#----------------------------------------------------------------------------




am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/valgrind
pkgincludedir = $(includedir)/valgrind
pkglibdir = $(libdir)/valgrind
pkglibexecdir = $(libexecdir)/valgrind
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
#am__append_1 = -Wno-cast-align -Wno-self-assign \
#                  -Wno-tautological-compare

##am__append_2 = -Wno-expansion-to-defined
#am__append_3 = -DVGABI_
#am__append_4 = -DVGABI_
#am__append_5 = -Wl,-M,$(top_srcdir)/solaris/vgpreload-solaris.mapfile

# The Android toolchain includes all kinds of stdlib helpers present in
# bionic which is bad because we are not linking with it and the Android
# linker will panic.
#am__append_6 = -nostdlib
am__append_7 = \
	$(top_builddir)/coregrind/libgcc-sup-amd64-linux.a

am__append_8 = \
	$(top_builddir)/coregrind/libgcc-sup-x86-linux.a


# On Android we must ask for non-executable stack, not sure why.
##am__append_9 = -Wl,-z,noexecstack
noinst_PROGRAMS = callgrind-amd64-linux$(EXEEXT) \
	$(am__EXEEXT_1)
am__append_10 = callgrind-x86-linux
#callgrind_x86_linux_DEPENDENCIES =
subdir = callgrind
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(noinst_HEADERS) \
	$(pkginclude_HEADERS) $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = callgrind_annotate callgrind_control
CONFIG_CLEAN_VPATH_FILES =
am__EXEEXT_1 = callgrind-x86-linux$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
am__objects_1 = callgrind_amd64_linux-bb.$(OBJEXT) \
	callgrind_amd64_linux-bbcc.$(OBJEXT) \
	callgrind_amd64_linux-callstack.$(OBJEXT) \
	callgrind_amd64_linux-clo.$(OBJEXT) \
	callgrind_amd64_linux-context.$(OBJEXT) \
	callgrind_amd64_linux-costs.$(OBJEXT) \
	callgrind_amd64_linux-debug.$(OBJEXT) \
	callgrind_amd64_linux-dump.$(OBJEXT) \
	callgrind_amd64_linux-events.$(OBJEXT) \
	callgrind_amd64_linux-fn.$(OBJEXT) \
	callgrind_amd64_linux-jumps.$(OBJEXT) \
	callgrind_amd64_linux-main.$(OBJEXT) \
	callgrind_amd64_linux-sim.$(OBJEXT) \
	callgrind_amd64_linux-threads.$(OBJEXT)
am_callgrind_amd64_linux_OBJECTS = $(am__objects_1)
callgrind_amd64_linux_OBJECTS =  \
	$(am_callgrind_amd64_linux_OBJECTS)
am__callgrind_x86_linux_SOURCES_DIST = bb.c bbcc.c \
	callstack.c clo.c context.c costs.c debug.c dump.c events.c \
	fn.c jumps.c main.c sim.c threads.c
am__objects_2 = callgrind_x86_linux-bb.$(OBJEXT) \
	callgrind_x86_linux-bbcc.$(OBJEXT) \
	callgrind_x86_linux-callstack.$(OBJEXT) \
	callgrind_x86_linux-clo.$(OBJEXT) \
	callgrind_x86_linux-context.$(OBJEXT) \
	callgrind_x86_linux-costs.$(OBJEXT) \
	callgrind_x86_linux-debug.$(OBJEXT) \
	callgrind_x86_linux-dump.$(OBJEXT) \
	callgrind_x86_linux-events.$(OBJEXT) \
	callgrind_x86_linux-fn.$(OBJEXT) \
	callgrind_x86_linux-jumps.$(OBJEXT) \
	callgrind_x86_linux-main.$(OBJEXT) \
	callgrind_x86_linux-sim.$(OBJEXT) \
	callgrind_x86_linux-threads.$(OBJEXT)
am_callgrind_x86_linux_OBJECTS =  \
	$(am__objects_2)
callgrind_x86_linux_OBJECTS =  \
	$(am_callgrind_x86_linux_OBJECTS)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkgincludedir)"
SCRIPTS = $(bin_SCRIPTS)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade =  \
	./$(DEPDIR)/callgrind_amd64_linux-bb.Po \
	./$(DEPDIR)/callgrind_amd64_linux-bbcc.Po \
	./$(DEPDIR)/callgrind_amd64_linux-callstack.Po \
	./$(DEPDIR)/callgrind_amd64_linux-clo.Po \
	./$(DEPDIR)/callgrind_amd64_linux-context.Po \
	./$(DEPDIR)/callgrind_amd64_linux-costs.Po \
	./$(DEPDIR)/callgrind_amd64_linux-debug.Po \
	./$(DEPDIR)/callgrind_amd64_linux-dump.Po \
	./$(DEPDIR)/callgrind_amd64_linux-events.Po \
	./$(DEPDIR)/callgrind_amd64_linux-fn.Po \
	./$(DEPDIR)/callgrind_amd64_linux-jumps.Po \
	./$(DEPDIR)/callgrind_amd64_linux-main.Po \
	./$(DEPDIR)/callgrind_amd64_linux-sim.Po \
	./$(DEPDIR)/callgrind_amd64_linux-threads.Po \
	./$(DEPDIR)/callgrind_x86_linux-bb.Po \
	./$(DEPDIR)/callgrind_x86_linux-bbcc.Po \
	./$(DEPDIR)/callgrind_x86_linux-callstack.Po \
	./$(DEPDIR)/callgrind_x86_linux-clo.Po \
	./$(DEPDIR)/callgrind_x86_linux-context.Po \
	./$(DEPDIR)/callgrind_x86_linux-costs.Po \
	./$(DEPDIR)/callgrind_x86_linux-debug.Po \
	./$(DEPDIR)/callgrind_x86_linux-dump.Po \
	./$(DEPDIR)/callgrind_x86_linux-events.Po \
	./$(DEPDIR)/callgrind_x86_linux-fn.Po \
	./$(DEPDIR)/callgrind_x86_linux-jumps.Po \
	./$(DEPDIR)/callgrind_x86_linux-main.Po \
	./$(DEPDIR)/callgrind_x86_linux-sim.Po \
	./$(DEPDIR)/callgrind_x86_linux-threads.Po
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(callgrind_amd64_linux_SOURCES) \
	$(callgrind_x86_linux_SOURCES)
DIST_SOURCES = $(callgrind_amd64_linux_SOURCES) \
	$(am__callgrind_x86_linux_SOURCES_DIST)
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
HEADERS = $(noinst_HEADERS) $(pkginclude_HEADERS)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	distdir distdir-am
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
DIST_SUBDIRS = $(SUBDIRS)
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(srcdir)/callgrind_annotate.in $(srcdir)/callgrind_control.in \
	$(top_srcdir)/Makefile.all.am $(top_srcdir)/Makefile.tool.am \
	$(top_srcdir)/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = ${SHELL} '/home/liu2598/MemFuzz/src/third/valgrind-3.21.0/missing' aclocal-1.16
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = /usr/bin/ar
AUTOCONF = ${SHELL} '/home/liu2598/MemFuzz/src/third/valgrind-3.21.0/missing' autoconf
AUTOHEADER = ${SHELL} '/home/liu2598/MemFuzz/src/third/valgrind-3.21.0/missing' autoheader
AUTOMAKE = ${SHELL} '/home/liu2598/MemFuzz/src/third/valgrind-3.21.0/missing' automake-1.16
AWK = gawk
BOOST_CFLAGS = 
BOOST_LIBS = 
CC = gcc
CCAS = gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = 
CCDEPMODE = depmode=gcc3
CFLAGS = 
CFLAGS_MPI = -g -O -fno-omit-frame-pointer -Wall -fpic
CPP = gcc -E
CPPFLAGS = 
CSCOPE = cscope
CTAGS = ctags
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = 
CYGPATH_W = echo
DEFAULT_SUPP = ./xfree-3.supp ./xfree-4.supp glibc-2.X-drd.supp glibc-2.X-helgrind.supp glibc-2.X.supp 
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DIFF = diff -u
DIS_PATH = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
ETAGS = etags
EXEEXT = 
FLAG_FALIGNED_NEW = -faligned-new
FLAG_FINLINE_FUNCTIONS = -finline-functions
FLAG_FNO_IPA_ICF = -fno-ipa-icf
FLAG_FNO_STACK_PROTECTOR = -fno-stack-protector
FLAG_FSANITIZE = 
FLAG_FSIZED_DEALLOCATION = -fsized-deallocation
FLAG_M32 =  -m32
FLAG_M64 = -m64
FLAG_MLONG_DOUBLE_128 = -mlong-double-128
FLAG_MMMX = -mmmx
FLAG_MSA = 
FLAG_MSSE = -msse
FLAG_NO_BUILD_ID = 
FLAG_NO_PIE = -no-pie
FLAG_OCTEON = 
FLAG_OCTEON2 = 
FLAG_PIE = -pie
FLAG_T_TEXT = -Ttext-segment
FLAG_UNLIMITED_INLINE_UNIT_GROWTH = --param inline-unit-growth=900
FLAG_W_CAST_ALIGN = -Wcast-align
FLAG_W_CAST_QUAL = -Wcast-qual
FLAG_W_EMPTY_BODY = -Wempty-body
FLAG_W_ENUM_CONVERSION = 
FLAG_W_EXTRA = -Wextra
FLAG_W_FORMAT = -Wformat
FLAG_W_FORMAT_SECURITY = -Wformat-security
FLAG_W_FORMAT_SIGNEDNESS = -Wformat-signedness
FLAG_W_IGNORED_QUALIFIERS = -Wignored-qualifiers
FLAG_W_IMPLICIT_FALLTHROUGH = -Wimplicit-fallthrough=2
FLAG_W_LOGICAL_OP = -Wlogical-op
FLAG_W_MISSING_PARAMETER_TYPE = -Wmissing-parameter-type
FLAG_W_NO_ALLOC_SIZE_LARGER_THAN = -Wno-alloc-size-larger-than
FLAG_W_NO_BUILTIN_MEMCPY_CHK_SIZE = 
FLAG_W_NO_EXPANSION_TO_DEFINED = -Wno-expansion-to-defined
FLAG_W_NO_FORMAT_OVERFLOW = -Wno-format-overflow
FLAG_W_NO_FORTIFY_SOURCE = 
FLAG_W_NO_FREE_NONHEAP_OBJECT = -Wno-free-nonheap-object
FLAG_W_NO_INCOMPATIBLE_POINTER_TYPES_DISCARDS_QUALIFIERS = 
FLAG_W_NO_INFINITE_RECURSION = 
FLAG_W_NO_MAYBE_UNINITIALIZED = -Wno-maybe-uninitialized
FLAG_W_NO_MEMSET_TRANSPOSED_ARGS = -Wno-memset-transposed-args
FLAG_W_NO_MISMATCHED_NEW_DELETE = 
FLAG_W_NO_NONNULL = -Wno-nonnull
FLAG_W_NO_NON_POWER_OF_TWO_ALIGNMENT = 
FLAG_W_NO_OVERFLOW = -Wno-overflow
FLAG_W_NO_POINTER_SIGN = -Wno-pointer-sign
FLAG_W_NO_SIGN_COMPARE = -Wno-sign-compare
FLAG_W_NO_STATIC_LOCAL_IN_INLINE = 
FLAG_W_NO_STRINGOP_OVERFLOW = -Wno-stringop-overflow
FLAG_W_NO_STRINGOP_OVERREAD = 
FLAG_W_NO_STRINGOP_TRUNCATION = 
FLAG_W_NO_SUSPICIOUS_BZERO = 
FLAG_W_NO_UNINITIALIZED = -Wno-uninitialized
FLAG_W_NO_UNUSED_BUT_SET_VARIABLE = -Wno-unused-but-set-variable
FLAG_W_NO_UNUSED_FUNCTION = -Wno-unused-function
FLAG_W_NO_USE_AFTER_FREE = 
FLAG_W_OLD_STYLE_DECLARATION = -Wold-style-declaration
FLAG_W_WRITE_STRINGS = -Wwrite-strings
GDB = /usr/bin/gdb
GLIBC_LIBC_PATH = */lib*/libc-2.*so*
GLIBC_LIBPTHREAD_PATH = */lib*/libpthread-2.*so*
GLIBC_VERSION = 2.27
GREP = /bin/grep
HWCAP_HAS_ALTIVEC = 
HWCAP_HAS_DFP = 
HWCAP_HAS_HTM = 
HWCAP_HAS_ISA_2_05 = 
HWCAP_HAS_ISA_2_06 = 
HWCAP_HAS_ISA_2_07 = 
HWCAP_HAS_ISA_3_00 = 
HWCAP_HAS_ISA_3_1 = 
HWCAP_HAS_MMA = 
HWCAP_HAS_VSX = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LDFLAGS_MPI = -fpic -shared
LIBOBJS = 
LIBS = 
LIB_UBSAN = 
LN_S = ln -s
LTLIBOBJS = 
LTO_AR = /usr/bin/ar
LTO_CFLAGS = 
LTO_RANLIB = ranlib
MAINT = #
MAKEINFO = ${SHELL} '/home/liu2598/MemFuzz/src/third/valgrind-3.21.0/missing' makeinfo
MKDIR_P = /bin/mkdir -p
MPI_CC = mpicc
OBJEXT = o
PACKAGE = valgrind
PACKAGE_BUGREPORT = valgrind-users@lists.sourceforge.net
PACKAGE_NAME = Valgrind
PACKAGE_STRING = Valgrind 3.21.0
PACKAGE_TARNAME = valgrind
PACKAGE_URL = 
PACKAGE_VERSION = 3.21.0
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PREFERRED_STACK_BOUNDARY_2 = -mpreferred-stack-boundary=2
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHA256SUM = sha256sum
SHELL = /bin/bash
SOLARIS_UNDEF_LARGESOURCE = 
STRIP = 
VALT_LOAD_ADDRESS_PRI = 0x58000000
VALT_LOAD_ADDRESS_SEC = 0x58000000
VERSION = 3.21.0
VGCONF_ABI = 
VGCONF_ARCH_PRI = amd64
VGCONF_ARCH_SEC = x86
VGCONF_OS = linux
VGCONF_PLATFORM_PRI_CAPS = AMD64_LINUX
VGCONF_PLATFORM_SEC_CAPS = X86_LINUX
VGCONF_PLATVARIANT = vanilla
VG_DATE = 28 Apr 2023
VG_TMPDIR = /tmp
VG_VER_MAJOR = 3
VG_VER_MINOR = 21
XCODE_DIR = 
XCRUN = 
abs_builddir = /home/liu2598/MemFuzz/src/third/valgrind-3.21.0/callgrind
abs_srcdir = /home/liu2598/MemFuzz/src/third/valgrind-3.21.0/callgrind
abs_top_builddir = /home/liu2598/MemFuzz/src/third/valgrind-3.21.0
abs_top_srcdir = /home/liu2598/MemFuzz/src/third/valgrind-3.21.0
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/liu2598/MemFuzz/src/third/valgrind-3.21.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /home/youwei/MemFuzz/src/third/valgrind-3.21.0/exe
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
SUBDIRS = . tests
inplacedir = $(top_builddir)/.in_place

#----------------------------------------------------------------------------
# Flags
#----------------------------------------------------------------------------

# Baseline flags for all compilations.  Aim here is to maximise
# performance and get whatever useful warnings we can out of gcc.
# -fno-builtin is important for defeating LLVM's idiom recognition
# that somehow causes VG_(memset) to get into infinite recursion.
AM_CFLAGS_BASE = -O2 -g -Wall -Wmissing-prototypes -Wshadow \
	-Wpointer-arith -Wstrict-prototypes -Wmissing-declarations \
	-Wcast-align -Wcast-qual -Wwrite-strings \
	-Wempty-body -Wformat -Wformat-signedness \
	-Wformat-security -Wignored-qualifiers \
	-Wmissing-parameter-type -Wlogical-op \
	 -Wimplicit-fallthrough=2 \
	-Wold-style-declaration -finline-functions \
	-fno-stack-protector  \
	-fno-strict-aliasing -fno-builtin $(am__append_1) \
	$(am__append_2)
#ISA_3_0_BUILD_FLAG = -DHAS_XSCVHPDP  -DHAS_ISA_3_00

# Power ISA flag for use by guest_ppc_helpers.c
##ISA_3_0_BUILD_FLAG = -DHAS_XSCVHPDP -DHAS_DARN -DHAS_ISA_3_00
ISA_3_0_BUILD_FLAG = 
AM_CFLAGS_PSO_BASE = -O -g -fno-omit-frame-pointer -fno-strict-aliasing \
		     -fpic -fno-builtin -fno-ipa-icf

#AM_CFLAGS_PSO_BASE = -O -g -fno-omit-frame-pointer -fno-strict-aliasing \
#		     -fpic -fPIC -fno-builtin


# These flags are used for building the preload shared objects (PSOs).
# The aim is to give reasonable performance but also to have good
# stack traces, since users often see stack traces extending 
# into (and through) the preloads.  Also, we must use any
# -mpreferred-stack-boundary flag to build the preload shared
# objects, since that risks misaligning the client's stack and
# results in segfaults like (eg) #324050.
#AM_CFLAGS_PSO_BASE = -dynamic \
#		     -O -g -fno-omit-frame-pointer -fno-strict-aliasing \
#		     -fpic -fPIC -fno-builtin -fno-ipa-icf


# Flags for specific targets.
#
# Nb: the AM_CPPFLAGS_* values are suitable for building tools and auxprogs.
# For building the core, coregrind/Makefile.am files add some extra things.
AM_CPPFLAGS_AMD64_LINUX = -I$(top_srcdir) \
	-I$(top_srcdir)/include -I$(top_builddir)/include \
	-I$(top_srcdir)/VEX/pub -I$(top_builddir)/VEX/pub \
	-DVGA_amd64=1 -DVGO_linux=1 \
	-DVGP_amd64_linux=1 \
	-DVGPV_amd64_linux_vanilla=1 \
	$(am__append_3)
AM_CPPFLAGS_X86_LINUX =  \
	-I$(top_srcdir) \
	-I$(top_srcdir)/include \
	-I$(top_builddir)/include \
	-I$(top_srcdir)/VEX/pub \
	-I$(top_builddir)/VEX/pub \
	-DVGA_x86=1 \
	-DVGO_linux=1 \
	-DVGP_x86_linux=1 \
	-DVGPV_x86_linux_vanilla=1 \
	$(am__append_4)
AM_FLAG_M3264_X86_LINUX =  -m32
AM_CFLAGS_X86_LINUX =  -m32 -mpreferred-stack-boundary=2 \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_X86_LINUX =  -m32 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_LINUX =  -m32 -g
AM_FLAG_M3264_AMD64_LINUX = -m64
AM_CFLAGS_AMD64_LINUX = -m64 \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_AMD64_LINUX = -m64 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_LINUX = -m64 -g
AM_FLAG_M3264_PPC32_LINUX =  -m32
AM_CFLAGS_PPC32_LINUX =  -m32 $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_PPC32_LINUX =  -m32 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_PPC32_LINUX =  -m32 -g
AM_FLAG_M3264_PPC64BE_LINUX = -m64
AM_CFLAGS_PPC64BE_LINUX = -m64 $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_PPC64BE_LINUX = -m64 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_PPC64BE_LINUX = -m64 -g
AM_FLAG_M3264_PPC64LE_LINUX = -m64
AM_CFLAGS_PPC64LE_LINUX = -m64 $(AM_CFLAGS_BASE) $(ISA_3_0_BUILD_FLAG)
AM_CFLAGS_PSO_PPC64LE_LINUX = -m64 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_PPC64LE_LINUX = -m64 -g
AM_FLAG_M3264_X86_FREEBSD =  -m32
AM_CFLAGS_X86_FREEBSD =  -m32 -mpreferred-stack-boundary=2 \
			      $(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_X86_FREEBSD =  -m32 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_FREEBSD =  -m32 -g
AM_FLAG_M3264_ARM_LINUX =  -m32
AM_CFLAGS_ARM_LINUX =  -m32 \
			 	$(AM_CFLAGS_BASE) -marm -mcpu=cortex-a8

AM_CFLAGS_PSO_ARM_LINUX =  -m32 $(AM_CFLAGS_BASE) \
				-marm -mcpu=cortex-a8 $(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_ARM_LINUX =  -m32 \
				-marm -mcpu=cortex-a8 -g

AM_FLAG_M3264_ARM64_LINUX = -m64
AM_CFLAGS_ARM64_LINUX = -m64 $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_ARM64_LINUX = -m64 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_ARM64_LINUX = -m64 -g
AM_FLAG_M3264_AMD64_FREEBSD = -m64
AM_CFLAGS_AMD64_FREEBSD = -m64 \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_AMD64_FREEBSD = -m64 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_FREEBSD = -m64 -g
AM_FLAG_M3264_X86_DARWIN = -arch i386
AM_CFLAGS_X86_DARWIN = $(WERROR) -arch i386 $(AM_CFLAGS_BASE) \
				-mmacosx-version-min=10.6 \
				-fno-pic -fno-PIC

AM_CFLAGS_PSO_X86_DARWIN = $(AM_CFLAGS_X86_DARWIN) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_DARWIN = -arch i386 -g
AM_FLAG_M3264_AMD64_DARWIN = -arch x86_64
AM_CFLAGS_AMD64_DARWIN = $(WERROR) -arch x86_64 $(AM_CFLAGS_BASE) \
			    -mmacosx-version-min=10.6

AM_CFLAGS_PSO_AMD64_DARWIN = $(AM_CFLAGS_AMD64_DARWIN) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_DARWIN = -arch x86_64 -g
AM_FLAG_M3264_S390X_LINUX = -m64
AM_CFLAGS_S390X_LINUX = -m64 $(AM_CFLAGS_BASE) -fomit-frame-pointer
AM_CFLAGS_PSO_S390X_LINUX = -m64 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_S390X_LINUX = -m64 -g -mzarch -march=z900
AM_FLAG_M3264_MIPS32_LINUX =  -m32
AM_CFLAGS_MIPS32_LINUX =  -m32 $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_MIPS32_LINUX =  -m32 $(AM_CFLAGS_BASE) \
				$(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_MIPS32_LINUX =  -m32 -g
AM_FLAG_M3264_NANOMIPS_LINUX =  -m32
AM_CFLAGS_NANOMIPS_LINUX =  -m32 $(AM_CFLAGS_BASE) -mno-jump-table-opt
AM_CFLAGS_PSO_NANOMIPS_LINUX =  -m32 $(AM_CFLAGS_BASE) \
				$(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_NANOMIPS_LINUX =  -m32 -g
AM_FLAG_M3264_MIPS64_LINUX = -m64
AM_CFLAGS_MIPS64_LINUX = -m64 $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_MIPS64_LINUX = -m64 $(AM_CFLAGS_BASE) \
				$(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_MIPS64_LINUX = -m64 -g
AM_FLAG_M3264_X86_SOLARIS =  -m32
AM_CFLAGS_X86_SOLARIS =  -m32 -mpreferred-stack-boundary=2 \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer 

AM_CFLAGS_PSO_X86_SOLARIS =  -m32 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_SOLARIS =  -m32 -g -D_ASM
AM_FLAG_M3264_AMD64_SOLARIS = -m64
AM_CFLAGS_AMD64_SOLARIS = -m64 \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_AMD64_SOLARIS = -m64 $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_SOLARIS = -m64 -g -D_ASM

# Flags for the primary target.  These must be used to build the
# regtests and performance tests.  In fact, these must be used to
# build anything which is built only once on a dual-arch build.
#
AM_FLAG_M3264_PRI = $(AM_FLAG_M3264_AMD64_LINUX)
AM_CPPFLAGS_PRI = $(AM_CPPFLAGS_AMD64_LINUX)
AM_CFLAGS_PRI = $(AM_CFLAGS_AMD64_LINUX)
AM_CCASFLAGS_PRI = $(AM_CCASFLAGS_AMD64_LINUX)
#AM_FLAG_M3264_SEC = 
AM_FLAG_M3264_SEC = $(AM_FLAG_M3264_X86_LINUX)

# Baseline link flags for making vgpreload shared objects.
#
PRELOAD_LDFLAGS_COMMON_LINUX = -nodefaultlibs -shared \
	-Wl,-z,interpose,-z,initfirst $(am__append_6)
PRELOAD_LDFLAGS_COMMON_FREEBSD = -nodefaultlibs -shared -Wl,-z,interpose,-z,initfirst
PRELOAD_LDFLAGS_COMMON_DARWIN = -dynamic -dynamiclib -all_load
PRELOAD_LDFLAGS_COMMON_SOLARIS = -nodefaultlibs -shared \
	-Wl,-z,interpose,-z,initfirst $(am__append_5)
PRELOAD_LDFLAGS_X86_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX)  -m32
PRELOAD_LDFLAGS_AMD64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) -m64
PRELOAD_LDFLAGS_PPC32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX)  -m32
PRELOAD_LDFLAGS_PPC64BE_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) -m64
PRELOAD_LDFLAGS_PPC64LE_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) -m64
PRELOAD_LDFLAGS_ARM_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX)  -m32
PRELOAD_LDFLAGS_ARM64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) -m64
PRELOAD_LDFLAGS_X86_FREEBSD = $(PRELOAD_LDFLAGS_COMMON_FREEBSD)  -m32
PRELOAD_LDFLAGS_AMD64_FREEBSD = $(PRELOAD_LDFLAGS_COMMON_FREEBSD) -m64
PRELOAD_LDFLAGS_X86_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch i386
PRELOAD_LDFLAGS_AMD64_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch x86_64
PRELOAD_LDFLAGS_S390X_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) -m64
PRELOAD_LDFLAGS_MIPS32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX)  -m32
PRELOAD_LDFLAGS_NANOMIPS_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX)  -m32
PRELOAD_LDFLAGS_MIPS64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) -m64
PRELOAD_LDFLAGS_X86_SOLARIS = $(PRELOAD_LDFLAGS_COMMON_SOLARIS)  -m32
PRELOAD_LDFLAGS_AMD64_SOLARIS = $(PRELOAD_LDFLAGS_COMMON_SOLARIS) -m64

#----------------------------------------------------------------------------
# <tool>-<platform> stuff
#----------------------------------------------------------------------------
TOOL_DEPENDENCIES_AMD64_LINUX = \
	$(top_builddir)/coregrind/libcoregrind-amd64-linux.a \
	$(top_builddir)/VEX/libvex-amd64-linux.a

TOOL_DEPENDENCIES_X86_LINUX = \
	$(top_builddir)/coregrind/libcoregrind-x86-linux.a \
	$(top_builddir)/VEX/libvex-x86-linux.a

TOOL_LDADD_COMMON = -lgcc
TOOL_LDADD_AMD64_LINUX =  \
	$(TOOL_DEPENDENCIES_AMD64_LINUX) \
	$(TOOL_LDADD_COMMON) $(am__append_7)
TOOL_LDADD_X86_LINUX = $(TOOL_DEPENDENCIES_X86_LINUX) \
	$(TOOL_LDADD_COMMON) \
	$(am__append_8)

# -Wl,--build-id=none is needed when linking tools with a linker that only
# knows -Ttext and not -Ttext-segment. Without this flag newer ld versions
# (2.20 and later) create a .note.gnu.build-id at the default text segment
# address, which of course means the resulting executable
# is unusable. So we have to tell ld not to generate that, with
# --build-id=none unless the linker supports -Ttext-segment.
TOOL_LDFLAGS_COMMON_LINUX = \
	-static -nodefaultlibs -nostartfiles -u _start 

TOOL_LDFLAGS_COMMON_DARWIN = \
	-nodefaultlibs -nostartfiles -Wl,-u,__start -Wl,-e,__start

TOOL_LDFLAGS_COMMON_SOLARIS = \
	-static -nodefaultlibs -nostartfiles -u _start \
	-Wl,-M,/usr/lib/ld/map.noexstk

TOOL_LDFLAGS_COMMON_FREEBSD = -static \
	-nodefaultlibs -nostartfiles -Wl,-u,_start 

TOOL_LDFLAGS_X86_LINUX = \
	$(TOOL_LDFLAGS_COMMON_LINUX)  -m32

TOOL_LDFLAGS_X86_FREEBSD = \
	$(TOOL_LDFLAGS_COMMON_FREEBSD)  -m32

TOOL_LDFLAGS_AMD64_LINUX = \
	$(TOOL_LDFLAGS_COMMON_LINUX) -m64

TOOL_LDFLAGS_AMD64_FREEBSD = \
	$(TOOL_LDFLAGS_COMMON_FREEBSD) -m64

TOOL_LDFLAGS_PPC32_LINUX = \
	$(TOOL_LDFLAGS_COMMON_LINUX)  -m32

TOOL_LDFLAGS_PPC64BE_LINUX = \
	$(TOOL_LDFLAGS_COMMON_LINUX) -m64

TOOL_LDFLAGS_PPC64LE_LINUX = \
	$(TOOL_LDFLAGS_COMMON_LINUX) -m64

TOOL_LDFLAGS_ARM_LINUX = $(TOOL_LDFLAGS_COMMON_LINUX)  -m32 \
	$(am__append_9)
TOOL_LDFLAGS_ARM64_LINUX = \
	$(TOOL_LDFLAGS_COMMON_LINUX) -m64

TOOL_LDFLAGS_S390X_LINUX = \
	$(TOOL_LDFLAGS_COMMON_LINUX) -m64

TOOL_LDFLAGS_X86_DARWIN = \
	$(TOOL_LDFLAGS_COMMON_DARWIN) -arch i386

TOOL_LDFLAGS_AMD64_DARWIN = \
	$(TOOL_LDFLAGS_COMMON_DARWIN) -arch x86_64


# MIPS Linux default start symbol is __start, not _start like on x86 or amd
TOOL_LDFLAGS_MIPS32_LINUX = \
	-static -nodefaultlibs -nostartfiles -u __start  \
	 -m32

TOOL_LDFLAGS_NANOMIPS_LINUX = \
	-static -nodefaultlibs -nostartfiles -u __start  \
	 -m32 -Wl,-no-relax

TOOL_LDFLAGS_MIPS64_LINUX = \
	-static -nodefaultlibs -nostartfiles -u __start  \
	-m64

TOOL_LDFLAGS_X86_SOLARIS = \
	$(TOOL_LDFLAGS_COMMON_SOLARIS)  -m32

TOOL_LDFLAGS_AMD64_SOLARIS = \
	$(TOOL_LDFLAGS_COMMON_SOLARIS) -m64


# NB for 64-bit darwin.  We may want to set -Wl,-pagezero_size to
# something smaller than the default of 4G, so as to facilitate
# loading clients who are also linked thusly (currently m_ume.c
# will fail to load them).  Although such setting is probably
# better done in link_tool_exe.c.
#
#	-Wl,-pagezero_size,0x100000000

#----------------------------------------------------------------------------
# vgpreload_<tool>-<platform>.a stuff
#----------------------------------------------------------------------------
LIBREPLACEMALLOC_X86_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-x86-linux.a

LIBREPLACEMALLOC_AMD64_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-amd64-linux.a

LIBREPLACEMALLOC_PPC32_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-ppc32-linux.a

LIBREPLACEMALLOC_PPC64BE_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-ppc64be-linux.a

LIBREPLACEMALLOC_PPC64LE_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-ppc64le-linux.a

LIBREPLACEMALLOC_X86_FREEBSD = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-x86-freebsd.a

LIBREPLACEMALLOC_ARM_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-arm-linux.a

LIBREPLACEMALLOC_ARM64_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-arm64-linux.a

LIBREPLACEMALLOC_AMD64_FREEBSD = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-amd64-freebsd.a

LIBREPLACEMALLOC_X86_DARWIN = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-x86-darwin.a

LIBREPLACEMALLOC_AMD64_DARWIN = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-amd64-darwin.a

LIBREPLACEMALLOC_S390X_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-s390x-linux.a

LIBREPLACEMALLOC_MIPS32_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-mips32-linux.a

LIBREPLACEMALLOC_MIPS64_LINUX = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-mips64-linux.a

LIBREPLACEMALLOC_X86_SOLARIS = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-x86-solaris.a

LIBREPLACEMALLOC_AMD64_SOLARIS = \
	$(top_builddir)/coregrind/libreplacemalloc_toolpreload-amd64-solaris.a

LIBREPLACEMALLOC_LDFLAGS_X86_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_X86_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_AMD64_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_AMD64_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_PPC32_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_PPC32_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_PPC64BE_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_PPC64BE_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_PPC64LE_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_PPC64LE_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_ARM_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_ARM_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_ARM64_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_ARM64_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_X86_FREEBSD = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_X86_FREEBSD) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_AMD64_FREEBSD = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_AMD64_FREEBSD) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_X86_DARWIN = \
	$(LIBREPLACEMALLOC_X86_DARWIN)

LIBREPLACEMALLOC_LDFLAGS_AMD64_DARWIN = \
	$(LIBREPLACEMALLOC_AMD64_DARWIN)

LIBREPLACEMALLOC_LDFLAGS_S390X_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_S390X_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_MIPS32_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_MIPS32_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_MIPS64_LINUX = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_MIPS64_LINUX) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_X86_SOLARIS = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_X86_SOLARIS) \
	-Wl,--no-whole-archive

LIBREPLACEMALLOC_LDFLAGS_AMD64_SOLARIS = \
	-Wl,--whole-archive \
	$(LIBREPLACEMALLOC_AMD64_SOLARIS) \
	-Wl,--no-whole-archive

EXTRA_DIST = \
	docs/callgrind_annotate-manpage.xml \
	docs/callgrind_control-manpage.xml \
	docs/cl-manual.xml \
	docs/cl-format.xml


#----------------------------------------------------------------------------
# Headers, etc
#----------------------------------------------------------------------------
pkginclude_HEADERS = callgrind.h
bin_SCRIPTS = \
	callgrind_annotate \
	callgrind_control

noinst_HEADERS = \
	costs.h \
	events.h \
	global.h

CALLGRIND_SOURCES_COMMON = \
	bb.c \
	bbcc.c \
	callstack.c \
	clo.c \
	context.c \
	costs.c \
	debug.c \
	dump.c \
	events.c \
	fn.c \
	jumps.c \
	main.c \
	sim.c \
	threads.c


# We sneakily include "cg_branchpred.c" and "cg_arch.c" from cachegrind
CALLGRIND_CFLAGS_COMMON = -I$(top_srcdir)/cachegrind
callgrind_amd64_linux_SOURCES = \
	$(CALLGRIND_SOURCES_COMMON)

callgrind_amd64_linux_CPPFLAGS = \
	$(AM_CPPFLAGS_AMD64_LINUX)

callgrind_amd64_linux_CFLAGS = $(LTO_CFLAGS) \
	$(AM_CFLAGS_AMD64_LINUX) $(CALLGRIND_CFLAGS_COMMON)

callgrind_amd64_linux_DEPENDENCIES = \
	$(TOOL_DEPENDENCIES_AMD64_LINUX)

callgrind_amd64_linux_LDADD = \
	$(TOOL_LDADD_AMD64_LINUX)

callgrind_amd64_linux_LDFLAGS = \
	$(TOOL_LDFLAGS_AMD64_LINUX)

callgrind_amd64_linux_LINK = \
	$(top_builddir)/coregrind/link_tool_exe_linux \
	0x58000000 \
	$(LINK) \
	$(callgrind_amd64_linux_CFLAGS) \
	$(callgrind_amd64_linux_LDFLAGS)

callgrind_x86_linux_SOURCES = \
	$(CALLGRIND_SOURCES_COMMON)

callgrind_x86_linux_CPPFLAGS = \
	$(AM_CPPFLAGS_X86_LINUX)

callgrind_x86_linux_CFLAGS = $(LTO_CFLAGS) \
	$(AM_CFLAGS_X86_LINUX) $(CALLGRIND_CFLAGS_COMMON)

callgrind_x86_linux_DEPENDENCIES = \
	$(TOOL_DEPENDENCIES_X86_LINUX)

callgrind_x86_linux_LDADD = \
	$(TOOL_LDADD_X86_LINUX)

callgrind_x86_linux_LDFLAGS = \
	$(TOOL_LDFLAGS_X86_LINUX)

callgrind_x86_linux_LINK = \
	$(top_builddir)/coregrind/link_tool_exe_linux \
	0x58000000 \
	$(LINK) \
	$(callgrind_x86_linux_CFLAGS) \
	$(callgrind_x86_linux_LDFLAGS)

all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am $(top_srcdir)/Makefile.tool.am $(top_srcdir)/Makefile.all.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign callgrind/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign callgrind/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/Makefile.tool.am $(top_srcdir)/Makefile.all.am $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
callgrind_annotate: $(top_builddir)/config.status $(srcdir)/callgrind_annotate.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
callgrind_control: $(top_builddir)/config.status $(srcdir)/callgrind_control.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)

callgrind-amd64-linux$(EXEEXT): $(callgrind_amd64_linux_OBJECTS) $(callgrind_amd64_linux_DEPENDENCIES) $(EXTRA_callgrind_amd64_linux_DEPENDENCIES) 
	@rm -f callgrind-amd64-linux$(EXEEXT)
	$(AM_V_GEN)$(callgrind_amd64_linux_LINK) $(callgrind_amd64_linux_OBJECTS) $(callgrind_amd64_linux_LDADD) $(LIBS)

callgrind-x86-linux$(EXEEXT): $(callgrind_x86_linux_OBJECTS) $(callgrind_x86_linux_DEPENDENCIES) $(EXTRA_callgrind_x86_linux_DEPENDENCIES) 
	@rm -f callgrind-x86-linux$(EXEEXT)
	$(AM_V_GEN)$(callgrind_x86_linux_LINK) $(callgrind_x86_linux_OBJECTS) $(callgrind_x86_linux_LDADD) $(LIBS)
install-binSCRIPTS: $(bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f "$$d$$p"; then echo "$$d$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n' \
	    -e 'h;s|.*|.|' \
	    -e 'p;x;s,.*/,,;$(transform)' | sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1; } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) { files[d] = files[d] " " $$1; \
	      if (++n[d] == $(am__install_max)) { \
		print "f", d, files[d]; n[d] = 0; files[d] = "" } } \
	    else { print "f", d "/" $$4, $$1 } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	     if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	     test -z "$$files" || { \
	       echo " $(INSTALL_SCRIPT) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	       $(INSTALL_SCRIPT) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	     } \
	; done

uninstall-binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || exit 0; \
	files=`for p in $$list; do echo "$$p"; done | \
	       sed -e 's,.*/,,;$(transform)'`; \
	dir='$(DESTDIR)$(bindir)'; $(am__uninstall_files_from_dir)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/callgrind_amd64_linux-bb.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-bbcc.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-callstack.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-clo.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-context.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-costs.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-debug.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-dump.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-events.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-fn.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-jumps.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-main.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-sim.Po # am--include-marker
include ./$(DEPDIR)/callgrind_amd64_linux-threads.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-bb.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-bbcc.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-callstack.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-clo.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-context.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-costs.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-debug.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-dump.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-events.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-fn.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-jumps.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-main.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-sim.Po # am--include-marker
include ./$(DEPDIR)/callgrind_x86_linux-threads.Po # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.c.o:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

callgrind_amd64_linux-bb.o: bb.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-bb.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-bb.Tpo -c -o callgrind_amd64_linux-bb.o `test -f 'bb.c' || echo '$(srcdir)/'`bb.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-bb.Tpo $(DEPDIR)/callgrind_amd64_linux-bb.Po
#	$(AM_V_CC)source='bb.c' object='callgrind_amd64_linux-bb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-bb.o `test -f 'bb.c' || echo '$(srcdir)/'`bb.c

callgrind_amd64_linux-bb.obj: bb.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-bb.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-bb.Tpo -c -o callgrind_amd64_linux-bb.obj `if test -f 'bb.c'; then $(CYGPATH_W) 'bb.c'; else $(CYGPATH_W) '$(srcdir)/bb.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-bb.Tpo $(DEPDIR)/callgrind_amd64_linux-bb.Po
#	$(AM_V_CC)source='bb.c' object='callgrind_amd64_linux-bb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-bb.obj `if test -f 'bb.c'; then $(CYGPATH_W) 'bb.c'; else $(CYGPATH_W) '$(srcdir)/bb.c'; fi`

callgrind_amd64_linux-bbcc.o: bbcc.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-bbcc.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-bbcc.Tpo -c -o callgrind_amd64_linux-bbcc.o `test -f 'bbcc.c' || echo '$(srcdir)/'`bbcc.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-bbcc.Tpo $(DEPDIR)/callgrind_amd64_linux-bbcc.Po
#	$(AM_V_CC)source='bbcc.c' object='callgrind_amd64_linux-bbcc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-bbcc.o `test -f 'bbcc.c' || echo '$(srcdir)/'`bbcc.c

callgrind_amd64_linux-bbcc.obj: bbcc.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-bbcc.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-bbcc.Tpo -c -o callgrind_amd64_linux-bbcc.obj `if test -f 'bbcc.c'; then $(CYGPATH_W) 'bbcc.c'; else $(CYGPATH_W) '$(srcdir)/bbcc.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-bbcc.Tpo $(DEPDIR)/callgrind_amd64_linux-bbcc.Po
#	$(AM_V_CC)source='bbcc.c' object='callgrind_amd64_linux-bbcc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-bbcc.obj `if test -f 'bbcc.c'; then $(CYGPATH_W) 'bbcc.c'; else $(CYGPATH_W) '$(srcdir)/bbcc.c'; fi`

callgrind_amd64_linux-callstack.o: callstack.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-callstack.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-callstack.Tpo -c -o callgrind_amd64_linux-callstack.o `test -f 'callstack.c' || echo '$(srcdir)/'`callstack.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-callstack.Tpo $(DEPDIR)/callgrind_amd64_linux-callstack.Po
#	$(AM_V_CC)source='callstack.c' object='callgrind_amd64_linux-callstack.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-callstack.o `test -f 'callstack.c' || echo '$(srcdir)/'`callstack.c

callgrind_amd64_linux-callstack.obj: callstack.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-callstack.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-callstack.Tpo -c -o callgrind_amd64_linux-callstack.obj `if test -f 'callstack.c'; then $(CYGPATH_W) 'callstack.c'; else $(CYGPATH_W) '$(srcdir)/callstack.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-callstack.Tpo $(DEPDIR)/callgrind_amd64_linux-callstack.Po
#	$(AM_V_CC)source='callstack.c' object='callgrind_amd64_linux-callstack.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-callstack.obj `if test -f 'callstack.c'; then $(CYGPATH_W) 'callstack.c'; else $(CYGPATH_W) '$(srcdir)/callstack.c'; fi`

callgrind_amd64_linux-clo.o: clo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-clo.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-clo.Tpo -c -o callgrind_amd64_linux-clo.o `test -f 'clo.c' || echo '$(srcdir)/'`clo.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-clo.Tpo $(DEPDIR)/callgrind_amd64_linux-clo.Po
#	$(AM_V_CC)source='clo.c' object='callgrind_amd64_linux-clo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-clo.o `test -f 'clo.c' || echo '$(srcdir)/'`clo.c

callgrind_amd64_linux-clo.obj: clo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-clo.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-clo.Tpo -c -o callgrind_amd64_linux-clo.obj `if test -f 'clo.c'; then $(CYGPATH_W) 'clo.c'; else $(CYGPATH_W) '$(srcdir)/clo.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-clo.Tpo $(DEPDIR)/callgrind_amd64_linux-clo.Po
#	$(AM_V_CC)source='clo.c' object='callgrind_amd64_linux-clo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-clo.obj `if test -f 'clo.c'; then $(CYGPATH_W) 'clo.c'; else $(CYGPATH_W) '$(srcdir)/clo.c'; fi`

callgrind_amd64_linux-context.o: context.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-context.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-context.Tpo -c -o callgrind_amd64_linux-context.o `test -f 'context.c' || echo '$(srcdir)/'`context.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-context.Tpo $(DEPDIR)/callgrind_amd64_linux-context.Po
#	$(AM_V_CC)source='context.c' object='callgrind_amd64_linux-context.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-context.o `test -f 'context.c' || echo '$(srcdir)/'`context.c

callgrind_amd64_linux-context.obj: context.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-context.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-context.Tpo -c -o callgrind_amd64_linux-context.obj `if test -f 'context.c'; then $(CYGPATH_W) 'context.c'; else $(CYGPATH_W) '$(srcdir)/context.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-context.Tpo $(DEPDIR)/callgrind_amd64_linux-context.Po
#	$(AM_V_CC)source='context.c' object='callgrind_amd64_linux-context.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-context.obj `if test -f 'context.c'; then $(CYGPATH_W) 'context.c'; else $(CYGPATH_W) '$(srcdir)/context.c'; fi`

callgrind_amd64_linux-costs.o: costs.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-costs.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-costs.Tpo -c -o callgrind_amd64_linux-costs.o `test -f 'costs.c' || echo '$(srcdir)/'`costs.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-costs.Tpo $(DEPDIR)/callgrind_amd64_linux-costs.Po
#	$(AM_V_CC)source='costs.c' object='callgrind_amd64_linux-costs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-costs.o `test -f 'costs.c' || echo '$(srcdir)/'`costs.c

callgrind_amd64_linux-costs.obj: costs.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-costs.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-costs.Tpo -c -o callgrind_amd64_linux-costs.obj `if test -f 'costs.c'; then $(CYGPATH_W) 'costs.c'; else $(CYGPATH_W) '$(srcdir)/costs.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-costs.Tpo $(DEPDIR)/callgrind_amd64_linux-costs.Po
#	$(AM_V_CC)source='costs.c' object='callgrind_amd64_linux-costs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-costs.obj `if test -f 'costs.c'; then $(CYGPATH_W) 'costs.c'; else $(CYGPATH_W) '$(srcdir)/costs.c'; fi`

callgrind_amd64_linux-debug.o: debug.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-debug.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-debug.Tpo -c -o callgrind_amd64_linux-debug.o `test -f 'debug.c' || echo '$(srcdir)/'`debug.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-debug.Tpo $(DEPDIR)/callgrind_amd64_linux-debug.Po
#	$(AM_V_CC)source='debug.c' object='callgrind_amd64_linux-debug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-debug.o `test -f 'debug.c' || echo '$(srcdir)/'`debug.c

callgrind_amd64_linux-debug.obj: debug.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-debug.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-debug.Tpo -c -o callgrind_amd64_linux-debug.obj `if test -f 'debug.c'; then $(CYGPATH_W) 'debug.c'; else $(CYGPATH_W) '$(srcdir)/debug.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-debug.Tpo $(DEPDIR)/callgrind_amd64_linux-debug.Po
#	$(AM_V_CC)source='debug.c' object='callgrind_amd64_linux-debug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-debug.obj `if test -f 'debug.c'; then $(CYGPATH_W) 'debug.c'; else $(CYGPATH_W) '$(srcdir)/debug.c'; fi`

callgrind_amd64_linux-dump.o: dump.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-dump.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-dump.Tpo -c -o callgrind_amd64_linux-dump.o `test -f 'dump.c' || echo '$(srcdir)/'`dump.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-dump.Tpo $(DEPDIR)/callgrind_amd64_linux-dump.Po
#	$(AM_V_CC)source='dump.c' object='callgrind_amd64_linux-dump.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-dump.o `test -f 'dump.c' || echo '$(srcdir)/'`dump.c

callgrind_amd64_linux-dump.obj: dump.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-dump.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-dump.Tpo -c -o callgrind_amd64_linux-dump.obj `if test -f 'dump.c'; then $(CYGPATH_W) 'dump.c'; else $(CYGPATH_W) '$(srcdir)/dump.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-dump.Tpo $(DEPDIR)/callgrind_amd64_linux-dump.Po
#	$(AM_V_CC)source='dump.c' object='callgrind_amd64_linux-dump.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-dump.obj `if test -f 'dump.c'; then $(CYGPATH_W) 'dump.c'; else $(CYGPATH_W) '$(srcdir)/dump.c'; fi`

callgrind_amd64_linux-events.o: events.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-events.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-events.Tpo -c -o callgrind_amd64_linux-events.o `test -f 'events.c' || echo '$(srcdir)/'`events.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-events.Tpo $(DEPDIR)/callgrind_amd64_linux-events.Po
#	$(AM_V_CC)source='events.c' object='callgrind_amd64_linux-events.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-events.o `test -f 'events.c' || echo '$(srcdir)/'`events.c

callgrind_amd64_linux-events.obj: events.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-events.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-events.Tpo -c -o callgrind_amd64_linux-events.obj `if test -f 'events.c'; then $(CYGPATH_W) 'events.c'; else $(CYGPATH_W) '$(srcdir)/events.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-events.Tpo $(DEPDIR)/callgrind_amd64_linux-events.Po
#	$(AM_V_CC)source='events.c' object='callgrind_amd64_linux-events.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-events.obj `if test -f 'events.c'; then $(CYGPATH_W) 'events.c'; else $(CYGPATH_W) '$(srcdir)/events.c'; fi`

callgrind_amd64_linux-fn.o: fn.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-fn.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-fn.Tpo -c -o callgrind_amd64_linux-fn.o `test -f 'fn.c' || echo '$(srcdir)/'`fn.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-fn.Tpo $(DEPDIR)/callgrind_amd64_linux-fn.Po
#	$(AM_V_CC)source='fn.c' object='callgrind_amd64_linux-fn.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-fn.o `test -f 'fn.c' || echo '$(srcdir)/'`fn.c

callgrind_amd64_linux-fn.obj: fn.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-fn.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-fn.Tpo -c -o callgrind_amd64_linux-fn.obj `if test -f 'fn.c'; then $(CYGPATH_W) 'fn.c'; else $(CYGPATH_W) '$(srcdir)/fn.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-fn.Tpo $(DEPDIR)/callgrind_amd64_linux-fn.Po
#	$(AM_V_CC)source='fn.c' object='callgrind_amd64_linux-fn.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-fn.obj `if test -f 'fn.c'; then $(CYGPATH_W) 'fn.c'; else $(CYGPATH_W) '$(srcdir)/fn.c'; fi`

callgrind_amd64_linux-jumps.o: jumps.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-jumps.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-jumps.Tpo -c -o callgrind_amd64_linux-jumps.o `test -f 'jumps.c' || echo '$(srcdir)/'`jumps.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-jumps.Tpo $(DEPDIR)/callgrind_amd64_linux-jumps.Po
#	$(AM_V_CC)source='jumps.c' object='callgrind_amd64_linux-jumps.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-jumps.o `test -f 'jumps.c' || echo '$(srcdir)/'`jumps.c

callgrind_amd64_linux-jumps.obj: jumps.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-jumps.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-jumps.Tpo -c -o callgrind_amd64_linux-jumps.obj `if test -f 'jumps.c'; then $(CYGPATH_W) 'jumps.c'; else $(CYGPATH_W) '$(srcdir)/jumps.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-jumps.Tpo $(DEPDIR)/callgrind_amd64_linux-jumps.Po
#	$(AM_V_CC)source='jumps.c' object='callgrind_amd64_linux-jumps.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-jumps.obj `if test -f 'jumps.c'; then $(CYGPATH_W) 'jumps.c'; else $(CYGPATH_W) '$(srcdir)/jumps.c'; fi`

callgrind_amd64_linux-main.o: main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-main.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-main.Tpo -c -o callgrind_amd64_linux-main.o `test -f 'main.c' || echo '$(srcdir)/'`main.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-main.Tpo $(DEPDIR)/callgrind_amd64_linux-main.Po
#	$(AM_V_CC)source='main.c' object='callgrind_amd64_linux-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-main.o `test -f 'main.c' || echo '$(srcdir)/'`main.c

callgrind_amd64_linux-main.obj: main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-main.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-main.Tpo -c -o callgrind_amd64_linux-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-main.Tpo $(DEPDIR)/callgrind_amd64_linux-main.Po
#	$(AM_V_CC)source='main.c' object='callgrind_amd64_linux-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`

callgrind_amd64_linux-sim.o: sim.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-sim.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-sim.Tpo -c -o callgrind_amd64_linux-sim.o `test -f 'sim.c' || echo '$(srcdir)/'`sim.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-sim.Tpo $(DEPDIR)/callgrind_amd64_linux-sim.Po
#	$(AM_V_CC)source='sim.c' object='callgrind_amd64_linux-sim.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-sim.o `test -f 'sim.c' || echo '$(srcdir)/'`sim.c

callgrind_amd64_linux-sim.obj: sim.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-sim.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-sim.Tpo -c -o callgrind_amd64_linux-sim.obj `if test -f 'sim.c'; then $(CYGPATH_W) 'sim.c'; else $(CYGPATH_W) '$(srcdir)/sim.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-sim.Tpo $(DEPDIR)/callgrind_amd64_linux-sim.Po
#	$(AM_V_CC)source='sim.c' object='callgrind_amd64_linux-sim.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-sim.obj `if test -f 'sim.c'; then $(CYGPATH_W) 'sim.c'; else $(CYGPATH_W) '$(srcdir)/sim.c'; fi`

callgrind_amd64_linux-threads.o: threads.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-threads.o -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-threads.Tpo -c -o callgrind_amd64_linux-threads.o `test -f 'threads.c' || echo '$(srcdir)/'`threads.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-threads.Tpo $(DEPDIR)/callgrind_amd64_linux-threads.Po
#	$(AM_V_CC)source='threads.c' object='callgrind_amd64_linux-threads.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-threads.o `test -f 'threads.c' || echo '$(srcdir)/'`threads.c

callgrind_amd64_linux-threads.obj: threads.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -MT callgrind_amd64_linux-threads.obj -MD -MP -MF $(DEPDIR)/callgrind_amd64_linux-threads.Tpo -c -o callgrind_amd64_linux-threads.obj `if test -f 'threads.c'; then $(CYGPATH_W) 'threads.c'; else $(CYGPATH_W) '$(srcdir)/threads.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_amd64_linux-threads.Tpo $(DEPDIR)/callgrind_amd64_linux-threads.Po
#	$(AM_V_CC)source='threads.c' object='callgrind_amd64_linux-threads.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_amd64_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_amd64_linux_CFLAGS) $(CFLAGS) -c -o callgrind_amd64_linux-threads.obj `if test -f 'threads.c'; then $(CYGPATH_W) 'threads.c'; else $(CYGPATH_W) '$(srcdir)/threads.c'; fi`

callgrind_x86_linux-bb.o: bb.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-bb.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-bb.Tpo -c -o callgrind_x86_linux-bb.o `test -f 'bb.c' || echo '$(srcdir)/'`bb.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-bb.Tpo $(DEPDIR)/callgrind_x86_linux-bb.Po
#	$(AM_V_CC)source='bb.c' object='callgrind_x86_linux-bb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-bb.o `test -f 'bb.c' || echo '$(srcdir)/'`bb.c

callgrind_x86_linux-bb.obj: bb.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-bb.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-bb.Tpo -c -o callgrind_x86_linux-bb.obj `if test -f 'bb.c'; then $(CYGPATH_W) 'bb.c'; else $(CYGPATH_W) '$(srcdir)/bb.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-bb.Tpo $(DEPDIR)/callgrind_x86_linux-bb.Po
#	$(AM_V_CC)source='bb.c' object='callgrind_x86_linux-bb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-bb.obj `if test -f 'bb.c'; then $(CYGPATH_W) 'bb.c'; else $(CYGPATH_W) '$(srcdir)/bb.c'; fi`

callgrind_x86_linux-bbcc.o: bbcc.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-bbcc.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-bbcc.Tpo -c -o callgrind_x86_linux-bbcc.o `test -f 'bbcc.c' || echo '$(srcdir)/'`bbcc.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-bbcc.Tpo $(DEPDIR)/callgrind_x86_linux-bbcc.Po
#	$(AM_V_CC)source='bbcc.c' object='callgrind_x86_linux-bbcc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-bbcc.o `test -f 'bbcc.c' || echo '$(srcdir)/'`bbcc.c

callgrind_x86_linux-bbcc.obj: bbcc.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-bbcc.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-bbcc.Tpo -c -o callgrind_x86_linux-bbcc.obj `if test -f 'bbcc.c'; then $(CYGPATH_W) 'bbcc.c'; else $(CYGPATH_W) '$(srcdir)/bbcc.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-bbcc.Tpo $(DEPDIR)/callgrind_x86_linux-bbcc.Po
#	$(AM_V_CC)source='bbcc.c' object='callgrind_x86_linux-bbcc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-bbcc.obj `if test -f 'bbcc.c'; then $(CYGPATH_W) 'bbcc.c'; else $(CYGPATH_W) '$(srcdir)/bbcc.c'; fi`

callgrind_x86_linux-callstack.o: callstack.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-callstack.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-callstack.Tpo -c -o callgrind_x86_linux-callstack.o `test -f 'callstack.c' || echo '$(srcdir)/'`callstack.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-callstack.Tpo $(DEPDIR)/callgrind_x86_linux-callstack.Po
#	$(AM_V_CC)source='callstack.c' object='callgrind_x86_linux-callstack.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-callstack.o `test -f 'callstack.c' || echo '$(srcdir)/'`callstack.c

callgrind_x86_linux-callstack.obj: callstack.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-callstack.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-callstack.Tpo -c -o callgrind_x86_linux-callstack.obj `if test -f 'callstack.c'; then $(CYGPATH_W) 'callstack.c'; else $(CYGPATH_W) '$(srcdir)/callstack.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-callstack.Tpo $(DEPDIR)/callgrind_x86_linux-callstack.Po
#	$(AM_V_CC)source='callstack.c' object='callgrind_x86_linux-callstack.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-callstack.obj `if test -f 'callstack.c'; then $(CYGPATH_W) 'callstack.c'; else $(CYGPATH_W) '$(srcdir)/callstack.c'; fi`

callgrind_x86_linux-clo.o: clo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-clo.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-clo.Tpo -c -o callgrind_x86_linux-clo.o `test -f 'clo.c' || echo '$(srcdir)/'`clo.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-clo.Tpo $(DEPDIR)/callgrind_x86_linux-clo.Po
#	$(AM_V_CC)source='clo.c' object='callgrind_x86_linux-clo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-clo.o `test -f 'clo.c' || echo '$(srcdir)/'`clo.c

callgrind_x86_linux-clo.obj: clo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-clo.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-clo.Tpo -c -o callgrind_x86_linux-clo.obj `if test -f 'clo.c'; then $(CYGPATH_W) 'clo.c'; else $(CYGPATH_W) '$(srcdir)/clo.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-clo.Tpo $(DEPDIR)/callgrind_x86_linux-clo.Po
#	$(AM_V_CC)source='clo.c' object='callgrind_x86_linux-clo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-clo.obj `if test -f 'clo.c'; then $(CYGPATH_W) 'clo.c'; else $(CYGPATH_W) '$(srcdir)/clo.c'; fi`

callgrind_x86_linux-context.o: context.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-context.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-context.Tpo -c -o callgrind_x86_linux-context.o `test -f 'context.c' || echo '$(srcdir)/'`context.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-context.Tpo $(DEPDIR)/callgrind_x86_linux-context.Po
#	$(AM_V_CC)source='context.c' object='callgrind_x86_linux-context.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-context.o `test -f 'context.c' || echo '$(srcdir)/'`context.c

callgrind_x86_linux-context.obj: context.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-context.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-context.Tpo -c -o callgrind_x86_linux-context.obj `if test -f 'context.c'; then $(CYGPATH_W) 'context.c'; else $(CYGPATH_W) '$(srcdir)/context.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-context.Tpo $(DEPDIR)/callgrind_x86_linux-context.Po
#	$(AM_V_CC)source='context.c' object='callgrind_x86_linux-context.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-context.obj `if test -f 'context.c'; then $(CYGPATH_W) 'context.c'; else $(CYGPATH_W) '$(srcdir)/context.c'; fi`

callgrind_x86_linux-costs.o: costs.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-costs.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-costs.Tpo -c -o callgrind_x86_linux-costs.o `test -f 'costs.c' || echo '$(srcdir)/'`costs.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-costs.Tpo $(DEPDIR)/callgrind_x86_linux-costs.Po
#	$(AM_V_CC)source='costs.c' object='callgrind_x86_linux-costs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-costs.o `test -f 'costs.c' || echo '$(srcdir)/'`costs.c

callgrind_x86_linux-costs.obj: costs.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-costs.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-costs.Tpo -c -o callgrind_x86_linux-costs.obj `if test -f 'costs.c'; then $(CYGPATH_W) 'costs.c'; else $(CYGPATH_W) '$(srcdir)/costs.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-costs.Tpo $(DEPDIR)/callgrind_x86_linux-costs.Po
#	$(AM_V_CC)source='costs.c' object='callgrind_x86_linux-costs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-costs.obj `if test -f 'costs.c'; then $(CYGPATH_W) 'costs.c'; else $(CYGPATH_W) '$(srcdir)/costs.c'; fi`

callgrind_x86_linux-debug.o: debug.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-debug.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-debug.Tpo -c -o callgrind_x86_linux-debug.o `test -f 'debug.c' || echo '$(srcdir)/'`debug.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-debug.Tpo $(DEPDIR)/callgrind_x86_linux-debug.Po
#	$(AM_V_CC)source='debug.c' object='callgrind_x86_linux-debug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-debug.o `test -f 'debug.c' || echo '$(srcdir)/'`debug.c

callgrind_x86_linux-debug.obj: debug.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-debug.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-debug.Tpo -c -o callgrind_x86_linux-debug.obj `if test -f 'debug.c'; then $(CYGPATH_W) 'debug.c'; else $(CYGPATH_W) '$(srcdir)/debug.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-debug.Tpo $(DEPDIR)/callgrind_x86_linux-debug.Po
#	$(AM_V_CC)source='debug.c' object='callgrind_x86_linux-debug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-debug.obj `if test -f 'debug.c'; then $(CYGPATH_W) 'debug.c'; else $(CYGPATH_W) '$(srcdir)/debug.c'; fi`

callgrind_x86_linux-dump.o: dump.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-dump.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-dump.Tpo -c -o callgrind_x86_linux-dump.o `test -f 'dump.c' || echo '$(srcdir)/'`dump.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-dump.Tpo $(DEPDIR)/callgrind_x86_linux-dump.Po
#	$(AM_V_CC)source='dump.c' object='callgrind_x86_linux-dump.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-dump.o `test -f 'dump.c' || echo '$(srcdir)/'`dump.c

callgrind_x86_linux-dump.obj: dump.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-dump.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-dump.Tpo -c -o callgrind_x86_linux-dump.obj `if test -f 'dump.c'; then $(CYGPATH_W) 'dump.c'; else $(CYGPATH_W) '$(srcdir)/dump.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-dump.Tpo $(DEPDIR)/callgrind_x86_linux-dump.Po
#	$(AM_V_CC)source='dump.c' object='callgrind_x86_linux-dump.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-dump.obj `if test -f 'dump.c'; then $(CYGPATH_W) 'dump.c'; else $(CYGPATH_W) '$(srcdir)/dump.c'; fi`

callgrind_x86_linux-events.o: events.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-events.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-events.Tpo -c -o callgrind_x86_linux-events.o `test -f 'events.c' || echo '$(srcdir)/'`events.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-events.Tpo $(DEPDIR)/callgrind_x86_linux-events.Po
#	$(AM_V_CC)source='events.c' object='callgrind_x86_linux-events.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-events.o `test -f 'events.c' || echo '$(srcdir)/'`events.c

callgrind_x86_linux-events.obj: events.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-events.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-events.Tpo -c -o callgrind_x86_linux-events.obj `if test -f 'events.c'; then $(CYGPATH_W) 'events.c'; else $(CYGPATH_W) '$(srcdir)/events.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-events.Tpo $(DEPDIR)/callgrind_x86_linux-events.Po
#	$(AM_V_CC)source='events.c' object='callgrind_x86_linux-events.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-events.obj `if test -f 'events.c'; then $(CYGPATH_W) 'events.c'; else $(CYGPATH_W) '$(srcdir)/events.c'; fi`

callgrind_x86_linux-fn.o: fn.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-fn.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-fn.Tpo -c -o callgrind_x86_linux-fn.o `test -f 'fn.c' || echo '$(srcdir)/'`fn.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-fn.Tpo $(DEPDIR)/callgrind_x86_linux-fn.Po
#	$(AM_V_CC)source='fn.c' object='callgrind_x86_linux-fn.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-fn.o `test -f 'fn.c' || echo '$(srcdir)/'`fn.c

callgrind_x86_linux-fn.obj: fn.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-fn.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-fn.Tpo -c -o callgrind_x86_linux-fn.obj `if test -f 'fn.c'; then $(CYGPATH_W) 'fn.c'; else $(CYGPATH_W) '$(srcdir)/fn.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-fn.Tpo $(DEPDIR)/callgrind_x86_linux-fn.Po
#	$(AM_V_CC)source='fn.c' object='callgrind_x86_linux-fn.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-fn.obj `if test -f 'fn.c'; then $(CYGPATH_W) 'fn.c'; else $(CYGPATH_W) '$(srcdir)/fn.c'; fi`

callgrind_x86_linux-jumps.o: jumps.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-jumps.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-jumps.Tpo -c -o callgrind_x86_linux-jumps.o `test -f 'jumps.c' || echo '$(srcdir)/'`jumps.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-jumps.Tpo $(DEPDIR)/callgrind_x86_linux-jumps.Po
#	$(AM_V_CC)source='jumps.c' object='callgrind_x86_linux-jumps.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-jumps.o `test -f 'jumps.c' || echo '$(srcdir)/'`jumps.c

callgrind_x86_linux-jumps.obj: jumps.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-jumps.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-jumps.Tpo -c -o callgrind_x86_linux-jumps.obj `if test -f 'jumps.c'; then $(CYGPATH_W) 'jumps.c'; else $(CYGPATH_W) '$(srcdir)/jumps.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-jumps.Tpo $(DEPDIR)/callgrind_x86_linux-jumps.Po
#	$(AM_V_CC)source='jumps.c' object='callgrind_x86_linux-jumps.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-jumps.obj `if test -f 'jumps.c'; then $(CYGPATH_W) 'jumps.c'; else $(CYGPATH_W) '$(srcdir)/jumps.c'; fi`

callgrind_x86_linux-main.o: main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-main.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-main.Tpo -c -o callgrind_x86_linux-main.o `test -f 'main.c' || echo '$(srcdir)/'`main.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-main.Tpo $(DEPDIR)/callgrind_x86_linux-main.Po
#	$(AM_V_CC)source='main.c' object='callgrind_x86_linux-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-main.o `test -f 'main.c' || echo '$(srcdir)/'`main.c

callgrind_x86_linux-main.obj: main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-main.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-main.Tpo -c -o callgrind_x86_linux-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-main.Tpo $(DEPDIR)/callgrind_x86_linux-main.Po
#	$(AM_V_CC)source='main.c' object='callgrind_x86_linux-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`

callgrind_x86_linux-sim.o: sim.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-sim.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-sim.Tpo -c -o callgrind_x86_linux-sim.o `test -f 'sim.c' || echo '$(srcdir)/'`sim.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-sim.Tpo $(DEPDIR)/callgrind_x86_linux-sim.Po
#	$(AM_V_CC)source='sim.c' object='callgrind_x86_linux-sim.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-sim.o `test -f 'sim.c' || echo '$(srcdir)/'`sim.c

callgrind_x86_linux-sim.obj: sim.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-sim.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-sim.Tpo -c -o callgrind_x86_linux-sim.obj `if test -f 'sim.c'; then $(CYGPATH_W) 'sim.c'; else $(CYGPATH_W) '$(srcdir)/sim.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-sim.Tpo $(DEPDIR)/callgrind_x86_linux-sim.Po
#	$(AM_V_CC)source='sim.c' object='callgrind_x86_linux-sim.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-sim.obj `if test -f 'sim.c'; then $(CYGPATH_W) 'sim.c'; else $(CYGPATH_W) '$(srcdir)/sim.c'; fi`

callgrind_x86_linux-threads.o: threads.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-threads.o -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-threads.Tpo -c -o callgrind_x86_linux-threads.o `test -f 'threads.c' || echo '$(srcdir)/'`threads.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-threads.Tpo $(DEPDIR)/callgrind_x86_linux-threads.Po
#	$(AM_V_CC)source='threads.c' object='callgrind_x86_linux-threads.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-threads.o `test -f 'threads.c' || echo '$(srcdir)/'`threads.c

callgrind_x86_linux-threads.obj: threads.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -MT callgrind_x86_linux-threads.obj -MD -MP -MF $(DEPDIR)/callgrind_x86_linux-threads.Tpo -c -o callgrind_x86_linux-threads.obj `if test -f 'threads.c'; then $(CYGPATH_W) 'threads.c'; else $(CYGPATH_W) '$(srcdir)/threads.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/callgrind_x86_linux-threads.Tpo $(DEPDIR)/callgrind_x86_linux-threads.Po
#	$(AM_V_CC)source='threads.c' object='callgrind_x86_linux-threads.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(callgrind_x86_linux_CPPFLAGS) $(CPPFLAGS) $(callgrind_x86_linux_CFLAGS) $(CFLAGS) -c -o callgrind_x86_linux-threads.obj `if test -f 'threads.c'; then $(CYGPATH_W) 'threads.c'; else $(CYGPATH_W) '$(srcdir)/threads.c'; fi`
install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(pkgincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(pkgincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(pkgincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(pkgincludedir)" || exit $$?; \
	done

uninstall-pkgincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(pkgincludedir)'; $(am__uninstall_files_from_dir)

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS) $(SCRIPTS) $(HEADERS) all-local
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkgincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-local clean-noinstPROGRAMS \
	mostlyclean-am

distclean: distclean-recursive
		-rm -f ./$(DEPDIR)/callgrind_amd64_linux-bb.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-bbcc.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-callstack.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-clo.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-context.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-costs.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-debug.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-dump.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-events.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-fn.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-jumps.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-main.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-sim.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-threads.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-bb.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-bbcc.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-callstack.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-clo.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-context.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-costs.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-debug.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-dump.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-events.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-fn.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-jumps.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-main.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-sim.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-threads.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am: install-pkgincludeHEADERS

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-binSCRIPTS install-exec-local

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
		-rm -f ./$(DEPDIR)/callgrind_amd64_linux-bb.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-bbcc.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-callstack.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-clo.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-context.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-costs.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-debug.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-dump.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-events.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-fn.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-jumps.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-main.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-sim.Po
	-rm -f ./$(DEPDIR)/callgrind_amd64_linux-threads.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-bb.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-bbcc.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-callstack.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-clo.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-context.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-costs.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-debug.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-dump.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-events.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-fn.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-jumps.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-main.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-sim.Po
	-rm -f ./$(DEPDIR)/callgrind_x86_linux-threads.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binSCRIPTS uninstall-local \
	uninstall-pkgincludeHEADERS

.MAKE: $(am__recursive_targets) install-am install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am all-local \
	am--depfiles check check-am clean clean-generic clean-local \
	clean-noinstPROGRAMS cscopelist-am ctags ctags-am distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binSCRIPTS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-exec-local \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am \
	install-pkgincludeHEADERS install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
	ps ps-am tags tags-am uninstall uninstall-am \
	uninstall-binSCRIPTS uninstall-local \
	uninstall-pkgincludeHEADERS

.PRECIOUS: Makefile


# This used to be required when Vex had a handwritten Makefile.  It
# shouldn't be needed any more, though.

#----------------------------------------------------------------------------
# noinst_PROGRAMS and noinst_DSYMS targets
#----------------------------------------------------------------------------

# On Darwin, for a program 'p', the DWARF debug info is stored in the
# directory 'p.dSYM'.  This must be generated after the executable is
# created, with 'dsymutil p'.  We could redefine LINK with a script that
# executes 'dsymutil' after linking, but that's a pain.  Instead we use this
# hook so that every time "make check" is run, we subsequently invoke
# 'dsymutil' on all the executables that lack a .dSYM directory, or that are
# newer than their corresponding .dSYM directory.
build-noinst_DSYMS: $(noinst_DSYMS)
	for f in $(noinst_DSYMS); do \
	  if [ ! -e $$f.dSYM  -o  $$f -nt $$f.dSYM ] ; then \
	      echo "dsymutil $$f"; \
	      dsymutil $$f; \
	  fi; \
	done

# This is used by coregrind/Makefile.am and Makefile.tool.am for doing
# "in-place" installs.  It copies $(noinst_PROGRAMS) into $inplacedir.
# It needs to be depended on by an 'all-local' rule.
inplace-noinst_PROGRAMS: $(noinst_PROGRAMS)
	mkdir -p $(inplacedir); \
	for f in $(noinst_PROGRAMS) ; do \
	  rm -f $(inplacedir)/$$f; \
	  ln -f -s ../$(subdir)/$$f $(inplacedir); \
	done

# Similar to inplace-noinst_PROGRAMS
inplace-noinst_DSYMS: build-noinst_DSYMS
	mkdir -p $(inplacedir); \
	for f in $(noinst_DSYMS); do \
	  rm -f $(inplacedir)/$$f.dSYM; \
	  ln -f -s ../$(subdir)/$$f.dSYM $(inplacedir); \
	done

# This is used by coregrind/Makefile.am and by <tool>/Makefile.am for doing
# "make install".  It copies $(noinst_PROGRAMS) into $prefix/libexec/valgrind/.
# It needs to be depended on by an 'install-exec-local' rule.
install-noinst_PROGRAMS: $(noinst_PROGRAMS)
	$(mkinstalldirs) $(DESTDIR)$(pkglibexecdir); \
	for f in $(noinst_PROGRAMS); do \
	  $(INSTALL_PROGRAM) $$f $(DESTDIR)$(pkglibexecdir); \
	done

# This is used by coregrind/Makefile.am and by <tool>/Makefile.am for doing
# "make uninstall".  It removes $(noinst_PROGRAMS) from $prefix/libexec/valgrind/.
# It needs to be depended on by an 'uninstall-local' rule.
uninstall-noinst_PROGRAMS:
	for f in $(noinst_PROGRAMS); do \
	  rm -f $(DESTDIR)$(pkglibexecdir)/$$f; \
	done

# Similar to install-noinst_PROGRAMS.
# Nb: we don't use $(INSTALL_PROGRAM) here because it doesn't work with
# directories.  XXX: not sure whether the resulting permissions will be
# correct when using 'cp -R'...
install-noinst_DSYMS: build-noinst_DSYMS
	$(mkinstalldirs) $(DESTDIR)$(pkglibexecdir); \
	for f in $(noinst_DSYMS); do \
	  cp -R $$f.dSYM $(DESTDIR)$(pkglibexecdir); \
	done

# Similar to uninstall-noinst_PROGRAMS.
uninstall-noinst_DSYMS:
	for f in $(noinst_DSYMS); do \
	  rm -f $(DESTDIR)$(pkglibexecdir)/$$f.dSYM; \
	done

# This needs to be depended on by a 'clean-local' rule.
clean-noinst_DSYMS:
	for f in $(noinst_DSYMS); do \
	  rm -rf $$f.dSYM; \
	done

#----------------------------------------------------------------------------
# General stuff
#----------------------------------------------------------------------------

all-local: inplace-noinst_PROGRAMS inplace-noinst_DSYMS

clean-local: clean-noinst_DSYMS

install-exec-local: install-noinst_PROGRAMS install-noinst_DSYMS

uninstall-local: uninstall-noinst_PROGRAMS uninstall-noinst_DSYMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
